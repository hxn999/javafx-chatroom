<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/client/chat/ChatController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/client/chat/ChatController.java" />
              <option name="originalContent" value="package com.client.chat;&#10;&#10;import com.client.NetworkUtil;&#10;import com.client.Page;&#10;import com.client.Pages;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.VBox;&#10;import model.Message;&#10;import model.User;&#10;&#10;import java.io.ObjectInputStream;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ChatController {&#10;&#10;    @FXML&#10;    private VBox messageContainer;&#10;    @FXML&#10;    private TextField messageField;&#10;    @FXML&#10;    private Button sendButton;&#10;    @FXML&#10;    private Label userName;&#10;    @FXML&#10;    private ImageView userImage;&#10;    @FXML&#10;    private Button joinRoomBtn;&#10;    @FXML&#10;    private Button createRoomBtn;&#10;    @FXML&#10;    private Button leaveRoomBtn;&#10;    @FXML&#10;    private TextField roomId;&#10;    @FXML&#10;    private TextField createRoomId;&#10;    @FXML&#10;    private Label roomLabel;&#10;&#10;    private List&lt;Message&gt; messages;&#10;&#10;&#10;    private User currentUser;&#10;&#10;//    public void setRoomIdAndUser(String roomId, User user) {&#10;//        this.roomId.setText(roomId);&#10;//        this.currentUser = user;&#10;//&#10;//        userName.setText(user.getName());&#10;//        if (user.getBase64ProfilePic() != null) {&#10;//            Image image = new Image(&quot;data:image/png;base64,&quot; + user.getBase64ProfilePic());&#10;//            userImage.setImage(image);&#10;//        }&#10;//&#10;//        listenForMessages();&#10;//        loadRoomHistory();&#10;//    }&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        sendButton.setOnAction(e -&gt; sendMessage());&#10;    }&#10;&#10;    private void sendMessage() {&#10;        String text = messageField.getText().trim();&#10;        if (text.isEmpty()) return;&#10;&#10;        try {&#10;            Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), text);&#10;            NetworkUtil.getOut().writeObject(msg);&#10;            NetworkUtil.getOut().flush();&#10;            messageField.clear();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to send message.&quot;);&#10;        }&#10;    }&#10;&#10;    private void listenForMessages() {&#10;        Thread thread = new Thread(() -&gt; {&#10;            try {&#10;                ObjectInputStream in = NetworkUtil.getIn();&#10;                while (true) {&#10;                    Object obj = in.readObject();&#10;                    if (obj instanceof Message msg &amp;&amp; msg.getRoomId().equals(roomId)) {&#10;                        Platform.runLater(() -&gt; addMessageToUI(msg));&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                Platform.runLater(() -&gt; showAlert(&quot;Disconnected from server.&quot;));&#10;            }&#10;        });&#10;        thread.setDaemon(true);&#10;        thread.start();&#10;    }&#10;&#10;    private void loadRoomHistory() throws Exception {&#10;&#10;        Object obj = NetworkUtil.getIn().readObject();&#10;        if (obj instanceof List&lt;?&gt; list) {&#10;            messages = (List&lt;Message&gt;) list;&#10;&#10;        } else {&#10;            if (obj instanceof String response) {&#10;                if (response.startsWith(&quot;JOINED:&quot;)) {&#10;                    messages = new ArrayList&lt;&gt;();&#10;                    System.out.println(&quot;Joined new created  room successfully.&quot;);&#10;                } else if (response.startsWith(&quot;FAIL&quot;)) {&#10;                    showAlert(&quot;Failed to join room. Room does not exist.&quot;);&#10;                } else {&#10;                    showAlert(&quot;Unexpected response: &quot; + response);&#10;                }&#10;            }&#10;        }&#10;&#10;    }&#10;&#10;    private void addMessageToUI(Message msg) {&#10;        String sender = msg.getSenderPhone().equals(currentUser.getPhoneNumber()) ? &quot;You&quot; : msg.getSenderPhone();&#10;        String timestamp = msg.getTimestamp().format(DateTimeFormatter.ofPattern(&quot;HH:mm&quot;));&#10;        String display = sender + &quot; [&quot; + timestamp + &quot;]: &quot; + msg.getContent();&#10;&#10;        Label label = new Label(display);&#10;        label.setWrapText(true);&#10;        messageContainer.getChildren().add(label);&#10;    }&#10;&#10;    private void populateMessages() {&#10;        messageContainer.getChildren().clear();&#10;        if (messages != null) {&#10;            if (messages.size() == 0) {&#10;                System.out.println(&quot;No messages in this room yet.&quot;);&#10;                return;&#10;            }&#10;            for (Message msg : messages) {&#10;                addMessageToUI(msg);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showAlert(String msg) {&#10;        new Alert(Alert.AlertType.ERROR, msg).showAndWait();&#10;    }&#10;&#10;    @FXML&#10;    private void loginBackHandler(ActionEvent event) {&#10;        // Handle back to login&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;LOGOUT:&quot; + currentUser.getPhoneNumber());&#10;            NetworkUtil.getOut().flush();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to logout.&quot;);&#10;        }&#10;&#10;        // Switch to login scene&#10;        try {&#10;            new Page().Goto(Pages.LOGIN);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;&#10;    }&#10;&#10;    public void createRoomHandler(ActionEvent event) {&#10;        String newRoomId = createRoomId.getText().trim();&#10;        if (newRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;CREATE_ROOM:&quot; + newRoomId);&#10;            NetworkUtil.getOut().flush();&#10;//            roomLabel.setText(&quot;Current Room: &quot; + roomId);&#10;            loadRoomHistory();&#10;            roomLabel.setText(newRoomId);&#10;            populateMessages();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to create room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void joinRoomHandler(ActionEvent event) {&#10;        String joiningRoomId = roomId.getText().trim();&#10;        if (joiningRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;JOIN:&quot; + joiningRoomId);&#10;            NetworkUtil.getOut().flush();&#10;//            roomLabel.setText(&quot;Current Room: &quot; + roomId);&#10;            loadRoomHistory();&#10;            roomLabel.setText(joiningRoomId);&#10;            populateMessages();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to join room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void leaveRoomHandler(ActionEvent event) {&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;LEAVE:&quot;);&#10;            NetworkUtil.getOut().flush();&#10;&#10;            // Clear the message container&#10;            messageContainer.getChildren().clear();&#10;            // Reset room ID and label&#10;            String response = (String) NetworkUtil.getIn().readObject();&#10;&#10;            if (response.equals(&quot;LEFT&quot;)) {&#10;                showAlert(&quot;You have left the room.&quot;);&#10;                messages=null;&#10;                roomLabel.setText(&quot;JOIN A ROOM&quot;);&#10;                populateMessages();&#10;            } else {&#10;                System.out.println(&quot;Response: &quot; + response);&#10;                showAlert(&quot;Failed to leave room.&quot;);&#10;                return;&#10;            }&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to leave room.&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.client.chat;&#10;&#10;import com.client.NetworkUtil;&#10;import com.client.Page;&#10;import com.client.Pages;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.control.*;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.VBox;&#10;import model.Message;&#10;import model.User;&#10;&#10;import java.io.ObjectInputStream;&#10;import java.time.LocalDateTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ChatController {&#10;&#10;    @FXML&#10;    private VBox messageContainer;&#10;    @FXML&#10;    private TextField messageField;&#10;    @FXML&#10;    private Button sendButton;&#10;    @FXML&#10;    private Label userName;&#10;    @FXML&#10;    private ImageView userImage;&#10;    @FXML&#10;    private Button joinRoomBtn;&#10;    @FXML&#10;    private Button createRoomBtn;&#10;    @FXML&#10;    private Button leaveRoomBtn;&#10;    @FXML&#10;    private TextField roomId;&#10;    @FXML&#10;    private TextField createRoomId;&#10;    @FXML&#10;    private Label roomLabel;&#10;&#10;    private List&lt;Message&gt; messages;&#10;&#10;&#10;    private User currentUser;&#10;&#10;//    public void setRoomIdAndUser(String roomId, User user) {&#10;//        this.roomId.setText(roomId);&#10;//        this.currentUser = user;&#10;//&#10;//        userName.setText(user.getName());&#10;//        if (user.getBase64ProfilePic() != null) {&#10;//            Image image = new Image(&quot;data:image/png;base64,&quot; + user.getBase64ProfilePic());&#10;//            userImage.setImage(image);&#10;//        }&#10;//&#10;//        listenForMessages();&#10;//        loadRoomHistory();&#10;//    }&#10;&#10;    @FXML&#10;    private void initialize() {&#10;        sendButton.setOnAction(e -&gt; sendMessage());&#10;    }&#10;&#10;    private void sendMessage() {&#10;        String text = messageField.getText().trim();&#10;        if (text.isEmpty()) return;&#10;&#10;        try {&#10;            Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), text, LocalDateTime.now());&#10;            NetworkUtil.getOut().writeObject(msg);&#10;            NetworkUtil.getOut().flush();&#10;            messageField.clear();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to send message.&quot;);&#10;        }&#10;    }&#10;&#10;    private void listenForMessages() {&#10;        Thread thread = new Thread(() -&gt; {&#10;            try {&#10;                ObjectInputStream in = NetworkUtil.getIn();&#10;                while (true) {&#10;                    Object obj = in.readObject();&#10;                    if (obj instanceof Message msg &amp;&amp; msg.getRoomId().equals(roomId)) {&#10;                        Platform.runLater(() -&gt; addMessageToUI(msg));&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                Platform.runLater(() -&gt; showAlert(&quot;Disconnected from server.&quot;));&#10;            }&#10;        });&#10;        thread.setDaemon(true);&#10;        thread.start();&#10;    }&#10;&#10;    private void loadRoomHistory() throws Exception {&#10;&#10;        Object obj = NetworkUtil.getIn().readObject();&#10;        if (obj instanceof List&lt;?&gt; list) {&#10;            messages = (List&lt;Message&gt;) list;&#10;&#10;        } else {&#10;            if (obj instanceof String response) {&#10;                if (response.startsWith(&quot;JOINED:&quot;)) {&#10;                    messages = new ArrayList&lt;&gt;();&#10;                    System.out.println(&quot;Joined new created  room successfully.&quot;);&#10;                } else if (response.startsWith(&quot;FAIL&quot;)) {&#10;                    showAlert(&quot;Failed to join room. Room does not exist.&quot;);&#10;                } else {&#10;                    showAlert(&quot;Unexpected response: &quot; + response);&#10;                }&#10;            }&#10;        }&#10;&#10;    }&#10;&#10;    private void addMessageToUI(Message msg) {&#10;        String sender = msg.getSenderPhone().equals(currentUser.getPhoneNumber()) ? &quot;You&quot; : msg.getSenderPhone();&#10;        String timestamp = msg.getTimestamp().format(DateTimeFormatter.ofPattern(&quot;HH:mm&quot;));&#10;        String display = sender + &quot; [&quot; + timestamp + &quot;]: &quot; + msg.getContent();&#10;&#10;        Label label = new Label(display);&#10;        label.setWrapText(true);&#10;        messageContainer.getChildren().add(label);&#10;    }&#10;&#10;    private void populateMessages() {&#10;        messageContainer.getChildren().clear();&#10;        if (messages != null) {&#10;            if (messages.size() == 0) {&#10;                System.out.println(&quot;No messages in this room yet.&quot;);&#10;                return;&#10;            }&#10;            for (Message msg : messages) {&#10;                addMessageToUI(msg);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showAlert(String msg) {&#10;        new Alert(Alert.AlertType.ERROR, msg).showAndWait();&#10;    }&#10;&#10;    @FXML&#10;    private void loginBackHandler(ActionEvent event) {&#10;        // Handle back to login&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;LOGOUT:&quot; + currentUser.getPhoneNumber());&#10;            NetworkUtil.getOut().flush();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to logout.&quot;);&#10;        }&#10;&#10;        // Switch to login scene&#10;        try {&#10;            new Page().Goto(Pages.LOGIN);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;&#10;    }&#10;&#10;    public void createRoomHandler(ActionEvent event) {&#10;        String newRoomId = createRoomId.getText().trim();&#10;        if (newRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;CREATE_ROOM:&quot; + newRoomId);&#10;            NetworkUtil.getOut().flush();&#10;//            roomLabel.setText(&quot;Current Room: &quot; + roomId);&#10;            loadRoomHistory();&#10;            roomLabel.setText(newRoomId);&#10;            populateMessages();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to create room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void joinRoomHandler(ActionEvent event) {&#10;        String joiningRoomId = roomId.getText().trim();&#10;        if (joiningRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;JOIN:&quot; + joiningRoomId);&#10;            NetworkUtil.getOut().flush();&#10;//            roomLabel.setText(&quot;Current Room: &quot; + roomId);&#10;            loadRoomHistory();&#10;            roomLabel.setText(joiningRoomId);&#10;            populateMessages();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to join room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void leaveRoomHandler(ActionEvent event) {&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;LEAVE:&quot;);&#10;            NetworkUtil.getOut().flush();&#10;&#10;            // Clear the message container&#10;            messageContainer.getChildren().clear();&#10;            // Reset room ID and label&#10;            String response = (String) NetworkUtil.getIn().readObject();&#10;&#10;            if (response.equals(&quot;LEFT&quot;)) {&#10;                showAlert(&quot;You have left the room.&quot;);&#10;                messages=null;&#10;                roomLabel.setText(&quot;JOIN A ROOM&quot;);&#10;                populateMessages();&#10;            } else {&#10;                System.out.println(&quot;Response: &quot; + response);&#10;                showAlert(&quot;Failed to leave room.&quot;);&#10;                return;&#10;            }&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to leave room.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Message.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Message.java" />
              <option name="originalContent" value="package model;&#10;&#10;import java.io.Serializable;&#10;import java.time.LocalDateTime;&#10;&#10;public class Message implements Serializable {&#10;    private String roomId;&#10;    private String senderPhone;&#10;    private String content;&#10;    private LocalDateTime timestamp;&#10;&#10;    public Message(String roomId, String senderPhone, String content) {&#10;        this.roomId = roomId;&#10;        this.senderPhone = senderPhone;&#10;        this.content = content;&#10;        this.timestamp = LocalDateTime.now();&#10;    }&#10;&#10;    public String getRoomId() { return roomId; }&#10;    public String getSenderPhone() { return senderPhone; }&#10;    public String getContent() { return content; }&#10;    public LocalDateTime getTimestamp() { return timestamp; }&#10;}&#10;" />
              <option name="updatedContent" value="package model;&#10;&#10;import java.io.Serializable;&#10;import java.time.LocalDateTime;&#10;&#10;public class Message implements Serializable {&#10;    private String roomId;&#10;    private String senderPhone;&#10;    private String content;&#10;    private LocalDateTime timestamp;&#10;&#10;    public Message(String roomId, String senderPhone, String content) {&#10;        this.roomId = roomId;&#10;        this.senderPhone = senderPhone;&#10;        this.content = content;&#10;        this.timestamp = LocalDateTime.now();&#10;    }&#10;&#10;    // New constructor with timestamp&#10;    public Message(String roomId, String senderPhone, String content, LocalDateTime timestamp) {&#10;        this.roomId = roomId;&#10;        this.senderPhone = senderPhone;&#10;        this.content = content;&#10;        this.timestamp = timestamp;&#10;    }&#10;&#10;    public String getRoomId() { return roomId; }&#10;    public String getSenderPhone() { return senderPhone; }&#10;    public String getContent() { return content; }&#10;    public LocalDateTime getTimestamp() { return timestamp; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/server/ChatDatabase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/server/ChatDatabase.java" />
              <option name="originalContent" value="package server;&#10;&#10;import model.Message;&#10;&#10;import java.io.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ChatDatabase {&#10;&#10;    private String getRoomFile(String roomId) {&#10;        return &quot;room-&quot; + roomId + &quot;.dat&quot;;&#10;    }&#10;&#10;    public List&lt;Message&gt; loadRoomChat(String roomId) {&#10;        String file = getRoomFile(roomId);&#10;        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {&#10;            return (List&lt;Message&gt;) ois.readObject();&#10;        } catch (Exception e) {&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    public void saveRoomMessage(Message message) {&#10;        String file = getRoomFile(message.getRoomId());&#10;        List&lt;Message&gt; messages = loadRoomChat(message.getRoomId());&#10;        messages.add(message);&#10;&#10;        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {&#10;            oos.writeObject(messages);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;import model.Message;&#10;&#10;import java.io.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ChatDatabase {&#10;&#10;    private String getRoomFile(String roomId) {&#10;        return &quot;room-&quot; + roomId + &quot;.dat&quot;;&#10;    }&#10;&#10;    public List&lt;Message&gt; loadRoomChat(String roomId) {&#10;        String file = getRoomFile(roomId);&#10;        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {&#10;            return (List&lt;Message&gt;) ois.readObject();&#10;        } catch (Exception e) {&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    public void saveRoomMessage(Message message) {&#10;        String file = getRoomFile(message.getRoomId());&#10;        List&lt;Message&gt; messages = loadRoomChat(message.getRoomId());&#10;        messages.add(message);&#10;&#10;        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {&#10;            oos.writeObject(messages);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Create a new room file if it doesn't exist&#10;    public void createRoomFile(String roomId) {&#10;        String file = getRoomFile(roomId);&#10;        File f = new File(file);&#10;        if (!f.exists()) {&#10;            try {&#10;                f.createNewFile();&#10;                try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f))) {&#10;                    oos.writeObject(new ArrayList&lt;Message&gt;());&#10;                }&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/server/ClientHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/server/ClientHandler.java" />
              <option name="originalContent" value="package server;&#10;&#10;import model.Message;&#10;import model.User;&#10;&#10;import java.io.*;&#10;import java.net.Socket;&#10;import java.util.*;&#10;&#10;import static server.ServerMain.saveUsersToFile;&#10;&#10;public class ClientHandler extends Thread {&#10;    private Socket socket;&#10;    private ObjectInputStream in;&#10;    private ObjectOutputStream out;&#10;    private User currentUser;&#10;    private String currentRoom;&#10;&#10;    public ClientHandler(Socket socket) {&#10;        try {&#10;            this.socket = socket;&#10;            this.out = new ObjectOutputStream(socket.getOutputStream());&#10;            this.in = new ObjectInputStream(socket.getInputStream());&#10;            this.start();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void run() {&#10;        try {&#10;            while (true) {&#10;                Object obj = in.readObject();&#10;                if (obj instanceof String command) {&#10;                    if (command.startsWith(&quot;LOGIN:&quot;)) {&#10;                        handleLogin(command);&#10;                    } else if (command.startsWith(&quot;JOIN:&quot;)) {&#10;                        handleJoin(command);&#10;                    } else if (command.startsWith(&quot;CREATE:&quot;)) {&#10;                        handleCreateAccount(command);&#10;                    } else if (command.startsWith(&quot;CREATE_ROOM:&quot;)) {&#10;                        createRoom(command);&#10;                    }&#10;                    else if(command.startsWith(&quot;LEAVE:&quot;)) {&#10;                        leaveRoom();&#10;                    }&#10;                } else if (obj instanceof Message msg) {&#10;                    ServerMain.roomHistory.computeIfAbsent(msg.getRoomId(), k -&gt; new ArrayList&lt;&gt;()).add(msg);&#10;                    // After receiving a Message `msg` from client&#10;                    new ChatDatabase().saveRoomMessage(msg); // Add this&#10;                    broadcastToRoom(msg.getRoomId(), msg);&#10;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            if (currentRoom != null) {&#10;                ServerMain.roomClients.get(currentRoom).remove(out);&#10;            }&#10;            System.out.println(&quot;Client disconnected&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleLogin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 3);&#10;        String phone = parts[1];&#10;        String pass = parts[2];&#10;&#10;        User user = ServerMain.users.get(phone);&#10;        if (user != null &amp;&amp; user.getPassword().equals(pass)) {&#10;            currentUser = user;&#10;            out.writeObject(&quot;SUCCESS&quot;);&#10;            out.writeObject(user);&#10;        } else {&#10;            out.writeObject(&quot;FAIL&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleCreateAccount(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 5);&#10;        String phone = parts[1];&#10;        String name = parts[2];&#10;        String pass = parts[3];&#10;        String base64 = parts[4];&#10;&#10;        if (ServerMain.users.containsKey(phone)) {&#10;            out.writeObject(&quot;EXISTS&quot;);&#10;        } else {&#10;            User u = new User(phone, name, pass, base64);&#10;            ServerMain.users.put(phone, u);&#10;            saveUsersToFile(); // ✅ Save all users&#10;            out.writeObject(&quot;CREATED&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleJoin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        currentRoom = parts[1];&#10;        ServerMain.roomClients.computeIfAbsent(currentRoom, k -&gt; new ArrayList&lt;&gt;()).add(out);&#10;&#10;        // Send chat history&#10;        List&lt;Message&gt; history = new ChatDatabase().loadRoomChat(currentRoom);&#10;        out.writeObject(history);&#10;&#10;    }&#10;&#10;    private void broadcastToRoom(String roomId, Message msg) {&#10;        List&lt;ObjectOutputStream&gt; clients = ServerMain.roomClients.getOrDefault(roomId, new ArrayList&lt;&gt;());&#10;        for (ObjectOutputStream o : clients) {&#10;            try {&#10;                o.writeObject(msg);&#10;                o.flush();&#10;            } catch (IOException ignored) {}&#10;        }&#10;    }&#10;&#10;    private void createRoom(String command) {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        String roomId = parts[1];&#10;        try {&#10;            // Initialize room history if not exists&#10;            if (!ServerMain.roomHistory.containsKey(roomId)) {&#10;                File file = new File(&quot;room-&quot; + roomId + &quot;.dat&quot;);&#10;                if (file.exists()) {&#10;                    try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {&#10;                        List&lt;Message&gt; messages = (List&lt;Message&gt;) in.readObject();&#10;                        ServerMain.roomHistory.put(roomId, messages);&#10;                    } catch (Exception e) {&#10;                        ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                    }&#10;                } else {&#10;                    ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                }&#10;            }&#10;&#10;            // Initialize room clients list if not exists&#10;            ServerMain.roomClients.putIfAbsent(roomId, new ArrayList&lt;&gt;());&#10;&#10;            // Add this client’s output stream to the room&#10;            ServerMain.roomClients.get(roomId).add(out);&#10;&#10;            // Send the full history to the new client&#10;            out.writeObject(ServerMain.roomHistory.get(roomId));&#10;            out.flush();&#10;&#10;            System.out.println(&quot;Client joined room: &quot; + roomId);&#10;&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Failed to create or join room: &quot; + roomId);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    &#10;    public void leaveRoom() {&#10;        if (currentRoom != null &amp;&amp; ServerMain.roomClients.containsKey(currentRoom)) {&#10;            ServerMain.roomClients.get(currentRoom).remove(out);&#10;            currentRoom = null;&#10;            try {&#10;                out.writeObject(&quot;LEFT&quot;);&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                &#10;            }&#10;        }&#10;        try {&#10;            out.writeObject(&quot;ERROR&quot;);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;import model.Message;&#10;import model.User;&#10;&#10;import java.io.*;&#10;import java.net.Socket;&#10;import java.util.*;&#10;&#10;import static server.ServerMain.saveUsersToFile;&#10;&#10;public class ClientHandler extends Thread {&#10;    private Socket socket;&#10;    private ObjectInputStream in;&#10;    private ObjectOutputStream out;&#10;    private User currentUser;&#10;    private String currentRoom;&#10;&#10;    public ClientHandler(Socket socket) {&#10;        try {&#10;            this.socket = socket;&#10;            this.out = new ObjectOutputStream(socket.getOutputStream());&#10;            this.in = new ObjectInputStream(socket.getInputStream());&#10;            this.start();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void run() {&#10;        try {&#10;            while (true) {&#10;                Object obj = in.readObject();&#10;                if (obj instanceof String command) {&#10;                    if (command.startsWith(&quot;LOGIN:&quot;)) {&#10;                        handleLogin(command);&#10;                    } else if (command.startsWith(&quot;JOIN:&quot;)) {&#10;                        handleJoin(command);&#10;                    } else if (command.startsWith(&quot;CREATE:&quot;)) {&#10;                        handleCreateAccount(command);&#10;                    } else if (command.startsWith(&quot;CREATE_ROOM:&quot;)) {&#10;                        createRoom(command);&#10;                    }&#10;                    else if(command.startsWith(&quot;LEAVE:&quot;)) {&#10;                        leaveRoom();&#10;                    }&#10;                } else if (obj instanceof Message msg) {&#10;                    ServerMain.roomHistory.computeIfAbsent(msg.getRoomId(), k -&gt; new ArrayList&lt;&gt;()).add(msg);&#10;                    // After receiving a Message `msg` from client&#10;                    new ChatDatabase().saveRoomMessage(msg); // Add this&#10;                    broadcastToRoom(msg.getRoomId(), msg);&#10;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            if (currentRoom != null) {&#10;                ServerMain.roomClients.get(currentRoom).remove(out);&#10;            }&#10;            System.out.println(&quot;Client disconnected&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleLogin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 3);&#10;        String phone = parts[1];&#10;        String pass = parts[2];&#10;&#10;        User user = ServerMain.users.get(phone);&#10;        if (user != null &amp;&amp; user.getPassword().equals(pass)) {&#10;            currentUser = user;&#10;            out.writeObject(&quot;SUCCESS&quot;);&#10;            out.writeObject(user);&#10;        } else {&#10;            out.writeObject(&quot;FAIL&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleCreateAccount(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 5);&#10;        String phone = parts[1];&#10;        String name = parts[2];&#10;        String pass = parts[3];&#10;        String base64 = parts[4];&#10;&#10;        if (ServerMain.users.containsKey(phone)) {&#10;            out.writeObject(&quot;EXISTS&quot;);&#10;        } else {&#10;            User u = new User(phone, name, pass, base64);&#10;            ServerMain.users.put(phone, u);&#10;            saveUsersToFile(); // ✅ Save all users&#10;            out.writeObject(&quot;CREATED&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleJoin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        currentRoom = parts[1];&#10;        ServerMain.roomClients.computeIfAbsent(currentRoom, k -&gt; new ArrayList&lt;&gt;()).add(out);&#10;&#10;        // Send chat history&#10;        List&lt;Message&gt; history = new ChatDatabase().loadRoomChat(currentRoom);&#10;        out.writeObject(history);&#10;&#10;    }&#10;&#10;    private void broadcastToRoom(String roomId, Message msg) {&#10;        List&lt;ObjectOutputStream&gt; clients = ServerMain.roomClients.getOrDefault(roomId, new ArrayList&lt;&gt;());&#10;        for (ObjectOutputStream o : clients) {&#10;            try {&#10;                o.writeObject(msg);&#10;                o.flush();&#10;            } catch (IOException ignored) {}&#10;        }&#10;    }&#10;&#10;    private void createRoom(String command) {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        String roomId = parts[1];&#10;        try {&#10;            // Initialize room history if not exists&#10;            if (!ServerMain.roomHistory.containsKey(roomId)) {&#10;                File file = new File(&quot;room-&quot; + roomId + &quot;.dat&quot;);&#10;                if (file.exists()) {&#10;                    try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {&#10;                        List&lt;Message&gt; messages = (List&lt;Message&gt;) in.readObject();&#10;                        ServerMain.roomHistory.put(roomId, messages);&#10;                    } catch (Exception e) {&#10;                        ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                    }&#10;                } else {&#10;                    ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                }&#10;            }&#10;&#10;            // Initialize room clients list if not exists&#10;            ServerMain.roomClients.putIfAbsent(roomId, new ArrayList&lt;&gt;());&#10;&#10;            // Add this client’s output stream to the room&#10;            ServerMain.roomClients.get(roomId).add(out);&#10;&#10;            // Send the full history to the new client&#10;            out.writeObject(ServerMain.roomHistory.get(roomId));&#10;            out.flush();&#10;&#10;            System.out.println(&quot;Client joined room: &quot; + roomId);&#10;&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Failed to create or join room: &quot; + roomId);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    &#10;    public void leaveRoom() {&#10;        if (currentRoom != null &amp;&amp; ServerMain.roomClients.containsKey(currentRoom)) {&#10;            ServerMain.roomClients.get(currentRoom).remove(out);&#10;            currentRoom = null;&#10;            try {&#10;                out.writeObject(&quot;LEFT&quot;);&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                &#10;            }&#10;        }&#10;        try {&#10;            out.writeObject(&quot;ERROR&quot;);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/chat.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/chat.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.Cursor?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.image.Image?&gt;&#10;&lt;?import javafx.scene.image.ImageView?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.Font?&gt;&#10;&#10;&lt;AnchorPane xmlns=&quot;http://javafx.com/javafx/23.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot;&#10;            fx:controller=&quot;com.client.chat.ChatController&quot;&#10;            prefHeight=&quot;600.0&quot; prefWidth=&quot;1000.0&quot; stylesheets=&quot;@styles/style.css&quot;&gt;&#10;&#10;   &lt;children&gt;&#10;&#10;      &lt;!-- Left contacts/search section --&gt;&#10;      &lt;VBox fx:id=&quot;contactsBox&quot; layoutX=&quot;-4.0&quot; layoutY=&quot;-2.0&quot; prefHeight=&quot;610.0&quot; prefWidth=&quot;347.0&quot; styleClass=&quot;contact-list&quot;&gt;&#10;         &lt;children&gt;&#10;&#10;            &lt;!-- Search Bar --&gt;&#10;            &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;57.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 5;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;searchIcon&quot; fitHeight=&quot;27.0&quot; fitWidth=&quot;27.0&quot;  style=&quot;-fx-opacity: 0.5;&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-search-40.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;&#10;                  &lt;TextField fx:id=&quot;searchField&quot; promptText=&quot;Search by name/phone&quot; prefHeight=&quot;46.0&quot; prefWidth=&quot;250.0&quot; style=&quot;-fx-text-fill: black;&quot; /&gt;&#10;&#10;                  &lt;ImageView fx:id=&quot;clearSearch&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; pickOnBounds=&quot;true&quot; style=&quot;-fx-translate-x: -40px;&quot;&gt;&#10;                     &lt;cursor&gt;&#10;                        &lt;Cursor fx:constant=&quot;HAND&quot; /&gt;&#10;                     &lt;/cursor&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-cancel-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;&#10;            &lt;!-- Chat list (room members or found users) --&gt;&#10;            &lt;ScrollPane fitToWidth=&quot;true&quot; prefHeight=&quot;487.0&quot; prefWidth=&quot;342.0&quot;&gt;&#10;               &lt;content&gt;&#10;                  &lt;VBox fx:id=&quot;chatList&quot; prefHeight=&quot;482.0&quot; prefWidth=&quot;338.0&quot;/&gt;&#10;               &lt;/content&gt;&#10;            &lt;/ScrollPane&gt;&#10;&#10;            &lt;!-- User info and settings --&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;62.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 40;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;userImage&quot; fitHeight=&quot;50.0&quot; fitWidth=&quot;50.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot; styleClass=&quot;user-img&quot;&gt;&#10;                     &lt;HBox.margin&gt;&#10;                        &lt;Insets left=&quot;20.0&quot;/&gt;&#10;                     &lt;/HBox.margin&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;userName&quot; styleClass=&quot;name-text&quot; text=&quot;Your Name&quot; textFill=&quot;WHITE&quot;/&gt;&#10;                  &lt;Button fx:id=&quot;settingsButton&quot; styleClass=&quot;settings-icon-btn&quot;&gt;&#10;                     &lt;graphic&gt;&#10;                        &lt;ImageView fitHeight=&quot;42.0&quot; fitWidth=&quot;44.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot;&gt;&#10;                           &lt;image&gt;&#10;                              &lt;Image url=&quot;@icons/gear_8.png&quot;/&gt;&#10;                           &lt;/image&gt;&#10;                        &lt;/ImageView&gt;&#10;                     &lt;/graphic&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- Room Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; layoutX=&quot;343.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;10.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;262.0&quot; padding=&quot;10&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fitHeight=&quot;34.0&quot; fitWidth=&quot;34.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/messenger_logo.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;roomLabel&quot; text=&quot;Room #&quot; style=&quot;-fx-text-fill: white; -fx-font-size: 16px;&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;            &lt;TextField fx:id=&quot;roomField&quot; promptText=&quot;Enter Room ID&quot; prefWidth=&quot;150.0&quot; /&gt;&#10;            &lt;Button fx:id=&quot;joinRoomButton&quot; text=&quot;Join&quot; styleClass=&quot;join-room-btn&quot;/&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Messages area --&gt;&#10;      &lt;ScrollPane fx:id=&quot;messageScrollPane&quot; layoutX=&quot;344.0&quot; layoutY=&quot;59.0&quot; prefHeight=&quot;486.0&quot; prefWidth=&quot;656.0&quot;&gt;&#10;         &lt;content&gt;&#10;            &lt;VBox fx:id=&quot;messageContainer&quot; alignment=&quot;BOTTOM_RIGHT&quot; prefHeight=&quot;483.0&quot; prefWidth=&quot;646.0&quot; spacing=&quot;10.0&quot; padding=&quot;10.0&quot;/&gt;&#10;         &lt;/content&gt;&#10;      &lt;/ScrollPane&gt;&#10;&#10;      &lt;!-- Message input --&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; layoutX=&quot;341.0&quot; layoutY=&quot;545.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7; -fx-spacing: 30;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;ImageView fx:id=&quot;sendIcon&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;image&gt;&#10;                  &lt;Image url=&quot;@icons/icons8-photo-30.png&quot;/&gt;&#10;               &lt;/image&gt;&#10;            &lt;/ImageView&gt;&#10;            &lt;TextField fx:id=&quot;messageField&quot; promptText=&quot;Write a message...&quot; prefHeight=&quot;37.0&quot; prefWidth=&quot;457.0&quot; styleClass=&quot;search-input&quot;/&gt;&#10;            &lt;Button fx:id=&quot;sendButton&quot;  prefHeight=&quot;35.0&quot; prefWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;graphic&gt;&#10;                  &lt;ImageView fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-telegram-app-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/graphic&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;   &lt;/children&gt;&#10;&lt;/AnchorPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.Cursor?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.image.Image?&gt;&#10;&lt;?import javafx.scene.image.ImageView?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.Font?&gt;&#10;&#10;&lt;AnchorPane xmlns=&quot;http://javafx.com/javafx/23.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot;&#10;            fx:controller=&quot;com.client.chat.ChatController&quot;&#10;            prefHeight=&quot;600.0&quot; prefWidth=&quot;1000.0&quot; stylesheets=&quot;@styles/style.css&quot;&gt;&#10;&#10;   &lt;children&gt;&#10;&#10;      &lt;!-- Left contacts/search section --&gt;&#10;      &lt;VBox fx:id=&quot;contactsBox&quot; layoutX=&quot;-4.0&quot; layoutY=&quot;-2.0&quot; prefHeight=&quot;610.0&quot; prefWidth=&quot;347.0&quot; styleClass=&quot;contact-list&quot;&gt;&#10;         &lt;children&gt;&#10;&#10;            &lt;!-- Search Bar --&gt;&#10;            &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;57.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 5;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;searchIcon&quot; fitHeight=&quot;27.0&quot; fitWidth=&quot;27.0&quot;  style=&quot;-fx-opacity: 0.5;&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-search-40.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;&#10;                  &lt;TextField fx:id=&quot;searchField&quot; promptText=&quot;Search by name/phone&quot; prefHeight=&quot;46.0&quot; prefWidth=&quot;250.0&quot; style=&quot;-fx-text-fill: black;&quot; /&gt;&#10;&#10;                  &lt;ImageView fx:id=&quot;clearSearch&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; pickOnBounds=&quot;true&quot; style=&quot;-fx-translate-x: -40px;&quot;&gt;&#10;                     &lt;cursor&gt;&#10;                        &lt;Cursor fx:constant=&quot;HAND&quot; /&gt;&#10;                     &lt;/cursor&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-cancel-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;&#10;            &lt;!-- Chat list (room members or found users) --&gt;&#10;            &lt;ScrollPane fitToWidth=&quot;true&quot; prefHeight=&quot;487.0&quot; prefWidth=&quot;342.0&quot;&gt;&#10;               &lt;content&gt;&#10;                  &lt;VBox fx:id=&quot;chatList&quot; prefHeight=&quot;482.0&quot; prefWidth=&quot;338.0&quot;/&gt;&#10;               &lt;/content&gt;&#10;            &lt;/ScrollPane&gt;&#10;&#10;            &lt;!-- User info and settings --&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;62.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 40;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;userImage&quot; fitHeight=&quot;50.0&quot; fitWidth=&quot;50.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot; styleClass=&quot;user-img&quot;&gt;&#10;                     &lt;HBox.margin&gt;&#10;                        &lt;Insets left=&quot;20.0&quot;/&gt;&#10;                     &lt;/HBox.margin&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;userName&quot; styleClass=&quot;name-text&quot; text=&quot;Your Name&quot; textFill=&quot;WHITE&quot;/&gt;&#10;                  &lt;Button fx:id=&quot;settingsButton&quot; styleClass=&quot;settings-icon-btn&quot;&gt;&#10;                     &lt;graphic&gt;&#10;                        &lt;ImageView fitHeight=&quot;42.0&quot; fitWidth=&quot;44.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot;&gt;&#10;                           &lt;image&gt;&#10;                              &lt;Image url=&quot;@icons/gear_8.png&quot;/&gt;&#10;                           &lt;/image&gt;&#10;                        &lt;/ImageView&gt;&#10;                     &lt;/graphic&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- Room Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; layoutX=&quot;343.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;10.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;262.0&quot;&gt;&#10;               &lt;padding&gt;&#10;                  &lt;Insets top=&quot;10.0&quot; right=&quot;10.0&quot; bottom=&quot;10.0&quot; left=&quot;10.0&quot;/&gt;&#10;               &lt;/padding&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fitHeight=&quot;34.0&quot; fitWidth=&quot;34.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/messenger_logo.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;roomLabel&quot; text=&quot;Room #&quot; style=&quot;-fx-text-fill: white; -fx-font-size: 16px;&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;            &lt;TextField fx:id=&quot;roomField&quot; promptText=&quot;Enter Room ID&quot; prefWidth=&quot;150.0&quot; /&gt;&#10;            &lt;Button fx:id=&quot;joinRoomButton&quot; text=&quot;Join&quot; styleClass=&quot;join-room-btn&quot;/&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Messages area --&gt;&#10;      &lt;ScrollPane fx:id=&quot;messageScrollPane&quot; layoutX=&quot;344.0&quot; layoutY=&quot;59.0&quot; prefHeight=&quot;486.0&quot; prefWidth=&quot;656.0&quot;&gt;&#10;         &lt;content&gt;&#10;            &lt;VBox fx:id=&quot;messageContainer&quot; alignment=&quot;BOTTOM_RIGHT&quot; prefHeight=&quot;483.0&quot; prefWidth=&quot;646.0&quot; spacing=&quot;10.0&quot;&gt;&#10;               &lt;padding&gt;&#10;                  &lt;Insets top=&quot;10.0&quot; right=&quot;10.0&quot; bottom=&quot;10.0&quot; left=&quot;10.0&quot;/&gt;&#10;               &lt;/padding&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/content&gt;&#10;      &lt;/ScrollPane&gt;&#10;&#10;      &lt;!-- Message input --&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; layoutX=&quot;341.0&quot; layoutY=&quot;545.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7; -fx-spacing: 30;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;ImageView fx:id=&quot;sendIcon&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;image&gt;&#10;                  &lt;Image url=&quot;@icons/icons8-photo-30.png&quot;/&gt;&#10;               &lt;/image&gt;&#10;            &lt;/ImageView&gt;&#10;            &lt;TextField fx:id=&quot;messageField&quot; promptText=&quot;Write a message...&quot; prefHeight=&quot;37.0&quot; prefWidth=&quot;457.0&quot; styleClass=&quot;search-input&quot;/&gt;&#10;            &lt;Button fx:id=&quot;sendButton&quot;  prefHeight=&quot;35.0&quot; prefWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;graphic&gt;&#10;                  &lt;ImageView fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-telegram-app-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/graphic&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;   &lt;/children&gt;&#10;&lt;/AnchorPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>