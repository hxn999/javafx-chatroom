<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/main/java/com/client/chat/ChatController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/client/chat/ChatController.java" />
              <option name="originalContent" value="package com.client.chat;&#10;&#10;import com.client.NetworkUtil;&#10;import com.client.Page;&#10;import com.client.Pages;&#10;import com.videoCall.AudioReceiver;&#10;import com.videoCall.AudioSender;&#10;import com.videoCall.VideoReceiver;&#10;import com.videoCall.VideoSender;&#10;import com.voiceMessage.VoicePlayback;&#10;import com.voiceMessage.VoiceRecorder;&#10;import javafx.animation.*;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Node;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.shape.Circle;&#10;import javafx.scene.shape.Rectangle;&#10;import javafx.scene.text.Text;&#10;import javafx.scene.text.TextFlow;&#10;import javafx.stage.FileChooser;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;import javafx.util.Duration;&#10;import model.Message;&#10;import model.MessageType;&#10;import model.User;&#10;&#10;import javax.sound.midi.Sequencer;&#10;import javax.sound.sampled.LineUnavailableException;&#10;import java.io.ByteArrayInputStream;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.io.ObjectInputStream;&#10;import java.nio.file.Files;&#10;import java.time.LocalDateTime;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.ArrayList;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class ChatController {&#10;&#10;    public static ChatController chatController;&#10;&#10;    @FXML&#10;    private ImageView VoiceSend;&#10;    @FXML&#10;    private ImageView sendIcon;&#10;    @FXML&#10;    private Button settingsButton;&#10;    @FXML&#10;    private VBox messageContainer;&#10;    @FXML&#10;    private TextField messageField;&#10;    @FXML&#10;    private Button sendButton;&#10;    @FXML&#10;    private Label userName;&#10;    @FXML&#10;    private ImageView userImage;&#10;    @FXML&#10;    private Button joinRoomBtn;&#10;    @FXML&#10;    private Button createRoomBtn;&#10;    @FXML&#10;    private Button leaveRoomBtn;&#10;    @FXML&#10;    private TextField roomId;&#10;    @FXML&#10;    private TextField createRoomId;&#10;    @FXML&#10;    private Label roomLabel;&#10;    @FXML&#10;    private Button videoCallBtn;&#10;    @FXML&#10;    public ImageView video;&#10;&#10;&#10;    private List&lt;Message&gt; messages;&#10;    public static User currentUser;&#10;    public volatile boolean  isRecording = false;&#10;    private String base64ImageString ;&#10;    public  byte[] voiceData;&#10;    public volatile boolean isMsgListening = false;&#10;    public String currentRoomId;&#10;    // video call threads&#10;    VideoSender videoSenderThread = new VideoSender(&quot;127.0.0.1&quot;, 5555);&#10;    VideoReceiver videoReceiverThread = new VideoReceiver(video, 5556);&#10;    AudioSender audioSenderThread = new AudioSender(&quot;127.0.0.1&quot;, 5557);&#10;    AudioReceiver audioReceiverThread = new AudioReceiver(5558);&#10;&#10;&#10;    public static ImageView getImageViewFromBase64(String base64String) {&#10;        if (base64String == null || base64String.isEmpty()) {&#10;            return null;&#10;        }&#10;&#10;        String base64Data = base64String;&#10;        if (base64String.startsWith(&quot;data:image&quot;)) {&#10;            int commaIndex = base64String.indexOf(',');&#10;            if (commaIndex != -1) {&#10;                base64Data = base64String.substring(commaIndex + 1);&#10;            }&#10;        }&#10;&#10;        try {&#10;            byte[] decodedBytes = Base64.getDecoder().decode(base64Data);&#10;            ByteArrayInputStream inputStream = new ByteArrayInputStream(decodedBytes);&#10;            Image image = new Image(inputStream);&#10;            return new ImageView(image);&#10;        } catch (IllegalArgumentException e) {&#10;            System.err.println(&quot;Error decoding Base64 string: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;&#10;        leaveRoomBtn.setVisible(false);&#10;        chatController = this;&#10;//        VoiceSend.setOnMouseClicked(event -&gt; {recordVoice();});&#10;        sendIcon.setOnMouseClicked(event -&gt; selectImage());&#10;        settingsButton.setOnAction(this::onSettingsClicked);&#10;        sendButton.setOnAction(e -&gt; sendMessage());&#10;        userName.setText(currentUser.getName());&#10;        userImage.setImage(getImageViewFromBase64(currentUser.getBase64ProfilePic()).getImage());&#10;    }&#10;&#10;    private void sendMessage() {&#10;&#10;&#10;        String text = messageField.getText().trim();&#10;&#10;        boolean hasImage = base64ImageString != null &amp;&amp; !base64ImageString.isEmpty();&#10;        boolean hasText = !text.isEmpty();&#10;        boolean hasVoice = voiceData != null &amp;&amp; voiceData.length != 0;// Placeholder for voice message logic&#10;        if (!hasText &amp;&amp; !hasImage &amp;&amp; !hasVoice) return;&#10;&#10;        if(hasText) {&#10;            try {&#10;                Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), currentUser.getName(), text, LocalDateTime.now());&#10;&#10;                NetworkUtil.getOut().writeObject(msg);&#10;                NetworkUtil.getOut().flush();&#10;                System.out.println(&quot;Received Message: &quot; + msg);&#10;&#10;                messageField.clear();&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                showAlert(&quot;Failed to send message.&quot;);&#10;            }&#10;        }&#10;        if(hasImage) {&#10;            try {&#10;                Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), base64ImageString, MessageType.IMAGE);&#10;                NetworkUtil.getOut().writeObject(msg);&#10;                NetworkUtil.getOut().flush();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                showAlert(&quot;Failed to send Image.&quot;);&#10;            }&#10;        }&#10;        if(hasVoice){&#10;            try{&#10;                Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), voiceData, MessageType.VOICE);&#10;                NetworkUtil.getOut().writeObject(msg);&#10;                NetworkUtil.getOut().flush();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                showAlert(&quot;Failed to send Image.&quot;);&#10;            }&#10;&#10;        }&#10;    }&#10;&#10;    Thread messageListenerThread = new Thread(() -&gt; {&#10;        try {&#10;            ObjectInputStream in = NetworkUtil.getIn();&#10;            while (isMsgListening) {&#10;                Object obj = in.readObject();&#10;&#10;                if (obj instanceof Message msg &amp;&amp; msg.getRoomId().equals(roomId.getText())) {&#10;                    messages.add(msg);&#10;                    Platform.runLater(() -&gt; addMessageToUI(msg));&#10;                } else if (obj instanceof String response) {&#10;//                        videoCallBtn.setText(response);&#10;                    System.out.println(response);&#10;                    if (response.equals(&quot;RECEIVE_CALL&quot;)) {&#10;                        Platform.runLater(() -&gt; {&#10;                            videoCallBtn.setText(&quot;RECEIVE CALL&quot;);&#10;                        });&#10;                    } else if (response.equals(&quot;FAILED&quot;)) {&#10;                        Platform.runLater(() -&gt; {&#10;                            videoCallBtn.setText(&quot;VIDEO CALL&quot;);&#10;                            showAlert(&quot;Failed to call.&quot;);&#10;                        });&#10;                    } else if (response.equals(&quot;WAITING&quot;)) {&#10;                        Platform.runLater(() -&gt; {&#10;                            videoCallBtn.setText(&quot;CALLING...&quot;);&#10;&#10;                        });&#10;                    } else if (response.equals(&quot;ACCEPT_CALL&quot;)) {&#10;                        Platform.runLater(() -&gt; {&#10;                            videoCallBtn.setText(&quot;END CALL&quot;);&#10;&#10;                            audioSenderThread.start();&#10;                            audioReceiverThread.start();&#10;                            videoSenderThread.start();&#10;                            videoReceiverThread.start();&#10;&#10;&#10;                        });&#10;                    } else if (response.equals(&quot;END_CALL&quot;)) {&#10;                        Platform.runLater(() -&gt; {&#10;                            videoCallBtn.setText(&quot;VIDEO CALL&quot;);&#10;&#10;                            // stop all threads&#10;                            videoSenderThread.stopThread();&#10;                            videoReceiverThread.stopThread();&#10;                            audioSenderThread.stopThread();&#10;                            audioReceiverThread.stopThread();&#10;&#10;&#10;                        });&#10;                    }else if (response.equals(&quot;LEFT&quot;)) {&#10;                        Platform.runLater(() -&gt; {&#10;&#10;                        showAlert(&quot;You have left the room.&quot;);&#10;                        messages = null;&#10;                        roomLabel.setText(&quot;JOIN A ROOM&quot;);&#10;                        currentRoomId = null;&#10;                        leaveRoomBtn.setVisible(false);&#10;                        joinRoomBtn.setDisable(false);&#10;                        createRoomBtn.setDisable(false);&#10;                        populateMessages();&#10;&#10;                        isMsgListening=false;&#10;                        });&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;            Platform.runLater(() -&gt; showAlert(&quot;Disconnected from server.&quot;));&#10;        }&#10;    });&#10;&#10;&#10;    private void listenForMessages() {&#10;        messageListenerThread.setDaemon(true);&#10;        isMsgListening=true;&#10;        messageListenerThread.start();&#10;    }&#10;&#10;    private void stopListenForMessages() {&#10;        isMsgListening=false;&#10;    }&#10;&#10;    private void loadRoomHistory() throws Exception {&#10;&#10;        Object obj = NetworkUtil.getIn().readObject();&#10;        if (obj instanceof List&lt;?&gt; list) {&#10;            messages = (List&lt;Message&gt;) list;&#10;&#10;        } else {&#10;            if (obj instanceof String response) {&#10;                if (response.startsWith(&quot;JOINED:&quot;)) {&#10;                    messages = new ArrayList&lt;&gt;();&#10;                    System.out.println(&quot;Joined new created  room successfully.&quot;);&#10;                } else if (response.startsWith(&quot;FAIL&quot;)) {&#10;                    showAlert(&quot;Failed to join room. Room does not exist.&quot;);&#10;                } else {&#10;                    showAlert(&quot;Unexpected response: &quot; + response);&#10;                }&#10;            }&#10;        }&#10;&#10;    }&#10;&#10;    @FXML&#10;    private void onSettingsClicked(ActionEvent event) {&#10;        try {&#10;            new Page().Goto(Pages.SETTINGS);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    // Build text content (show sender for others only)&#10;    private void addMessageBubble(String text, boolean mine, LocalTime time, String sender) {&#10;        // HBox to align the whole message bubble left/right&#10;        HBox messageContainer = new HBox();&#10;        messageContainer.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContainer.setPadding(new Insets(5, 10, 5, 10));&#10;&#10;        // Message Text (just the text content now)&#10;        Text messageText = new Text(text);&#10;        messageText.setStyle(&quot;-fx-fill: &quot; + (mine ? &quot;white&quot; : &quot;black&quot;) + &quot;; -fx-font-size: 14;&quot;);&#10;&#10;        // Message bubble styling&#10;        TextFlow messageBubble = new TextFlow(messageText);&#10;        messageBubble.setPadding(new Insets(10));&#10;        messageBubble.setMaxWidth(300); // Prevent stretching full width&#10;        messageBubble.setStyle(&#10;                mine&#10;                        ? &quot;-fx-background-color: #0084ff; -fx-background-radius: 15 0 15 15;&quot;&#10;                        : &quot;-fx-background-color: #8e24aa; -fx-background-radius: 0 15 15 15;&quot;&#10;        );&#10;&#10;        // Timestamp label&#10;        Label timeLabel = new Label(time.format(DateTimeFormatter.ofPattern(&quot;hh:mm a&quot;)));&#10;        timeLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#dddddd&quot;) + &quot;; -fx-font-size: 10;&quot;);&#10;&#10;        // VBox to stack sender (if not mine), bubble, and time&#10;        VBox messageContent = new VBox(3);&#10;        messageContent.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContent.setMaxWidth(Region.USE_PREF_SIZE);&#10;&#10;        // Add sender label above bubble for other users&#10;        if (!mine &amp;&amp; sender != null) {&#10;            Label senderLabel = new Label(sender);&#10;            senderLabel.setStyle(&quot;-fx-text-fill: #666666; -fx-font-size: 12; -fx-font-weight: bold;&quot;);&#10;            messageContent.getChildren().add(senderLabel);&#10;        }&#10;&#10;        messageContent.getChildren().addAll(messageBubble, timeLabel);&#10;        HBox.setHgrow(messageContent, Priority.NEVER); // prevent stretching&#10;&#10;        // Final add to message container&#10;        messageContainer.getChildren().add(messageContent);&#10;        this.messageContainer.getChildren().add(messageContainer); // &lt;-- your outer VBox holding all messages&#10;    }&#10;&#10;    private void addMessageToUI(Message msg) {&#10;            boolean mine = msg.getSenderPhone().equals(currentUser.getPhoneNumber());&#10;            String sender = mine ? &quot;You&quot; : msg.getSenderName();&#10;            LocalTime time = msg.getTimestamp().toLocalTime();&#10;            if(msg.getType().equals(MessageType.IMAGE)) {&#10;                addImageBubble(msg.getImage(), mine, time, sender);&#10;            }else if(msg.getType().equals(MessageType.VOICE)) {&#10;                addVoiceBubble(msg.getVoiceData(), mine, time, sender);&#10;            }&#10;            else {&#10;                System.out.println(&quot;Reached in the addMessageToUI.....................&quot;);&#10;                addMessageBubble(msg.getContent(), mine, time, sender);&#10;            }&#10;        }&#10;&#10;    private void populateMessages() {&#10;        messageContainer.getChildren().clear();&#10;        if (messages != null) {&#10;            if (messages.size() == 0) {&#10;                System.out.println(&quot;No messages in this room yet.&quot;);&#10;                return;&#10;            }&#10;            for (Message msg : messages) {&#10;                addMessageToUI(msg);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showAlert(String msg) {&#10;        new Alert(Alert.AlertType.ERROR, msg).showAndWait();&#10;    }&#10;&#10;    @FXML&#10;    private void loginBackHandler(ActionEvent event) {&#10;        // Handle back to login&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;LOGOUT:&quot; + currentUser.getPhoneNumber());&#10;            NetworkUtil.getOut().flush();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to logout.&quot;);&#10;        }&#10;&#10;        // Switch to login scene&#10;        try {&#10;            new Page().Goto(Pages.LOGIN);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;&#10;    }&#10;&#10;    public void createRoomHandler(ActionEvent event) {&#10;        String newRoomId = createRoomId.getText().trim();&#10;        if (newRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;CREATE_ROOM:&quot; + newRoomId);&#10;            NetworkUtil.getOut().flush();&#10;//            roomLabel.setText(&quot;Current Room: &quot; + roomId);&#10;//            loadRoomHistory();&#10;//            roomLabel.setText(newRoomId);&#10;//            populateMessages();&#10;            String response = (String) NetworkUtil.getIn().readObject();&#10;            if (response.startsWith(&quot;CREATED:&quot;)) {&#10;                System.out.println(&quot;Room created successfully.&quot;);&#10;            }&#10;            else {&#10;                showAlert(&quot;Failed to create room.&quot;);&#10;            }&#10;&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to create room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void joinRoomHandler(ActionEvent event) {&#10;        String joiningRoomId = roomId.getText().trim();&#10;        if (joiningRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;JOIN:&quot; + joiningRoomId);&#10;            NetworkUtil.getOut().flush();&#10;//            roomLabel.setText(&quot;Current Room: &quot; + roomId);&#10;            loadRoomHistory();&#10;            roomLabel.setText(joiningRoomId);&#10;            currentRoomId = joiningRoomId;&#10;            leaveRoomBtn.setVisible(true);&#10;            joinRoomBtn.setDisable(true);&#10;            createRoomBtn.setDisable(true);&#10;            populateMessages();&#10;            listenForMessages();&#10;            createRoomId.clear();&#10;            roomId.clear();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to join room.&quot;);&#10;        }&#10;    }&#10;&#10;    //To play Voice&#10;    private void addVoiceBubble(byte[] voiceData, boolean mine, LocalTime time, String sender) {&#10;        // HBox to align the whole message bubble left/right&#10;        HBox messageContainer = new HBox();&#10;        messageContainer.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContainer.setPadding(new Insets(5, 10, 5, 10));&#10;&#10;        // Voice control elements&#10;        HBox voiceControls = new HBox(10);&#10;        voiceControls.setAlignment(Pos.CENTER_LEFT);&#10;        voiceControls.setPadding(new Insets(10));&#10;&#10;        // Play button&#10;        Button playButton = new Button(&quot;▶&quot;);&#10;        playButton.setStyle(&quot;-fx-font-size: 16px; -fx-background-color: transparent; -fx-text-fill: &quot; +&#10;                (mine ? &quot;white&quot; : &quot;black&quot;) + &quot;; -fx-cursor: hand;&quot;);&#10;&#10;        // Voice duration/status label&#10;        Label durationLabel = new Label(&quot;Voice Message&quot;);&#10;        durationLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;white&quot; : &quot;black&quot;) + &quot;; -fx-font-size: 12px;&quot;);&#10;&#10;        // Waveform representation (simple visual)&#10;        Label waveformLabel = new Label(&quot;♪ ♫ ♪ ♫ ♪&quot;);&#10;        waveformLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#bbbbbb&quot;) + &quot;; -fx-font-size: 10px;&quot;);&#10;&#10;        voiceControls.getChildren().addAll(playButton, durationLabel, waveformLabel);&#10;&#10;        // Message bubble styling for voice&#10;        VBox voiceBubble = new VBox(voiceControls);&#10;        voiceBubble.setPadding(new Insets(5));&#10;        voiceBubble.setMaxWidth(250);&#10;        voiceBubble.setStyle(&#10;                mine&#10;                        ? &quot;-fx-background-color: #0084ff; -fx-background-radius: 15 0 15 15;&quot;&#10;                        : &quot;-fx-background-color: #8e24aa; -fx-background-radius: 0 15 15 15;&quot;&#10;        );&#10;&#10;        // Play button functionality&#10;        playButton.setOnAction(e -&gt; {&#10;            if (playButton.getText().equals(&quot;▶&quot;)) {&#10;                playButton.setText(&quot;⏸&quot;);&#10;                durationLabel.setText(&quot;Playing...&quot;);&#10;                VoicePlayback.playAudio(voiceData);&#10;&#10;                // Simulate playback duration&#10;                new Thread(() -&gt; {&#10;                    try {&#10;                        Thread.sleep(3000); // Simulate 3 seconds of playback&#10;                        Platform.runLater(() -&gt; {&#10;                            playButton.setText(&quot;▶&quot;);&#10;                            durationLabel.setText(&quot;Voice Message&quot;);&#10;                        });&#10;                    } catch (InterruptedException ex) {&#10;                        Thread.currentThread().interrupt();&#10;                    }&#10;                }).start();&#10;            } else {&#10;                playButton.setText(&quot;▶&quot;);&#10;                durationLabel.setText(&quot;Voice Message&quot;);&#10;                // TODO: Stop voice playback&#10;            }&#10;        });&#10;&#10;        // Timestamp label&#10;        Label timeLabel = new Label(time.format(DateTimeFormatter.ofPattern(&quot;hh:mm a&quot;)));&#10;        timeLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#dddddd&quot;) + &quot;; -fx-font-size: 10;&quot;);&#10;&#10;        // VBox to stack sender (if not mine), bubble, and time&#10;        VBox messageContent = new VBox(3);&#10;        messageContent.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContent.setMaxWidth(Region.USE_PREF_SIZE);&#10;&#10;        // Add sender label above bubble for other users&#10;        if (!mine &amp;&amp; sender != null) {&#10;            Label senderLabel = new Label(sender);&#10;            senderLabel.setStyle(&quot;-fx-text-fill: #666666; -fx-font-size: 12; -fx-font-weight: bold;&quot;);&#10;            messageContent.getChildren().add(senderLabel);&#10;        }&#10;&#10;        messageContent.getChildren().addAll(voiceBubble, timeLabel);&#10;        HBox.setHgrow(messageContent, Priority.NEVER); // prevent stretching&#10;&#10;        // Final add to message container&#10;        messageContainer.getChildren().add(messageContent);&#10;        this.messageContainer.getChildren().add(messageContainer);&#10;    }&#10;&#10;&#10;    //To show image&#10;    private void addImageBubble(String base64Image, boolean mine, LocalTime time, String sender) {&#10;        // HBox to align the whole message bubble left/right&#10;        HBox messageContainer = new HBox();&#10;        messageContainer.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContainer.setPadding(new Insets(5, 10, 5, 10));&#10;&#10;        // Image view from base64&#10;        ImageView imageView = getImageViewFromBase64(base64Image);&#10;        if (imageView == null) {&#10;            // Fallback to text if image can't be loaded&#10;            addMessageBubble(&quot;Image could not be loaded&quot;, mine, time, sender);&#10;            return;&#10;        }&#10;&#10;        // Set image size constraints&#10;        imageView.setFitWidth(200);&#10;        imageView.setFitHeight(150);&#10;        imageView.setPreserveRatio(true);&#10;        imageView.setSmooth(true);&#10;&#10;        // Message bubble styling for image&#10;        VBox imageBubble = new VBox(imageView);&#10;        imageBubble.setPadding(new Insets(5));&#10;        imageBubble.setMaxWidth(220);&#10;        imageBubble.setStyle(&#10;                mine&#10;                        ? &quot;-fx-background-color: #0084ff; -fx-background-radius: 15 0 15 15;&quot;&#10;                        : &quot;-fx-background-color: #8e24aa; -fx-background-radius: 0 15 15 15;&quot;&#10;        );&#10;&#10;        // Timestamp label&#10;        Label timeLabel = new Label(time.format(DateTimeFormatter.ofPattern(&quot;hh:mm a&quot;)));&#10;        timeLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#dddddd&quot;) + &quot;; -fx-font-size: 10;&quot;);&#10;&#10;        // VBox to stack sender (if not mine), bubble, and time&#10;        VBox messageContent = new VBox(3);&#10;        messageContent.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContent.setMaxWidth(Region.USE_PREF_SIZE);&#10;&#10;        // Add sender label above bubble for other users&#10;        if (!mine &amp;&amp; sender != null) {&#10;            Label senderLabel = new Label(sender);&#10;            senderLabel.setStyle(&quot;-fx-text-fill: #666666; -fx-font-size: 12; -fx-font-weight: bold;&quot;);&#10;            messageContent.getChildren().add(senderLabel);&#10;        }&#10;&#10;        messageContent.getChildren().addAll(imageBubble, timeLabel);&#10;        HBox.setHgrow(messageContent, Priority.NEVER); // prevent stretching&#10;&#10;        // Final add to message container&#10;        messageContainer.getChildren().add(messageContent);&#10;        this.messageContainer.getChildren().add(messageContainer); // &lt;-- your outer VBox holding all messages&#10;    }&#10;&#10;    private void selectImage() {&#10;        FileChooser fileChooser = new FileChooser();&#10;        fileChooser.setTitle(&quot;Select Image&quot;);&#10;        fileChooser.getExtensionFilters().addAll(&#10;                new FileChooser.ExtensionFilter(&quot;Image Files&quot;, &quot;*.png&quot;, &quot;*.jpg&quot;, &quot;*.jpeg&quot;, &quot;*.gif&quot;, &quot;*.bmp&quot;)&#10;        );&#10;&#10;        Stage stage = (Stage) sendIcon.getScene().getWindow();&#10;        File file = fileChooser.showOpenDialog(stage);&#10;&#10;        if (file != null) {&#10;            try {&#10;                byte[] imageBytes = Files.readAllBytes(file.toPath());&#10;                base64ImageString = Base64.getEncoder().encodeToString(imageBytes);&#10;                showAlert(&quot;Image selected successfully!&quot;);&#10;            } catch (Exception e) {&#10;                showAlert(&quot;Failed to load image: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;//    private void recordVoice() {&#10;//        // Create custom dialog&#10;//        Dialog&lt;Void&gt; recordingDialog = new Dialog&lt;&gt;();&#10;//        recordingDialog.setTitle(&quot;Voice Message&quot;);&#10;//        recordingDialog.initStyle(StageStyle.UNDECORATED);&#10;//&#10;//        // Main container with gradient background&#10;//        VBox mainContainer = new VBox();&#10;//        mainContainer.setPrefSize(400, 300);&#10;//        mainContainer.setStyle(&#10;//                &quot;-fx-background-color: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&quot; +&#10;//                        &quot;-fx-background-radius: 20;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 20, 0, 0, 5);&quot;&#10;//        );&#10;//&#10;//        // Header with close button&#10;//        HBox header = new HBox();&#10;//        header.setAlignment(Pos.CENTER_RIGHT);&#10;//        header.setPadding(new Insets(15, 20, 0, 20));&#10;//&#10;//        Button closeButton = new Button(&quot;✕&quot;);&#10;//        closeButton.setStyle(&#10;//                &quot;-fx-background-color: #ff4444;&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-padding: 5 10 5 10;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 5, 0, 0, 2);&quot;&#10;//        );&#10;//        closeButton.setOnMouseEntered(e -&gt; closeButton.setStyle(&#10;//                &quot;-fx-background-color: #ff6666;&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-padding: 5 10 5 10;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.4), 8, 0, 0, 3);&quot;&#10;//        ));&#10;//        closeButton.setOnMouseExited(e -&gt; closeButton.setStyle(&#10;//                &quot;-fx-background-color: #ff4444;&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-padding: 5 10 5 10;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 5, 0, 0, 2);&quot;&#10;//        ));&#10;//        closeButton.setOnAction(e -&gt; {&#10;//            // Stop all animations immediately;&#10;//            if (VoiceRecorder.isRecording()) {&#10;//                VoiceRecorder.setRecording(false);&#10;//            }&#10;//            recordingDialog.close();&#10;//            // Force stop recording if active&#10;//            if (VoiceRecorder.isRecording()) {&#10;//                VoiceRecorder.setRecording(false);&#10;//            }&#10;//        });&#10;//        header.getChildren().add(closeButton);&#10;//&#10;//        // Content area&#10;//        VBox content = new VBox(20);&#10;//        content.setAlignment(Pos.CENTER);&#10;//        content.setPadding(new Insets(20, 40, 40, 40));&#10;//&#10;//        // Title&#10;//        Label titleLabel = new Label(&quot; Voice Message&quot;);&#10;//        titleLabel.setStyle(&#10;//                &quot;-fx-font-size: 24px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.5), 2, 0, 0, 1);&quot;&#10;//        );&#10;//&#10;//        // Status label with smooth transitions&#10;//        Label statusLabel = new Label(&quot;Tap and hold to record&quot;);&#10;//        statusLabel.setStyle(&#10;//                &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-text-fill: rgba(255,255,255,0.9);&quot; +&#10;//                        &quot;-fx-text-alignment: center;&quot;&#10;//        );&#10;//&#10;//        // Recording button with animated effects&#10;//        Button recordButton = new Button();&#10;//        recordButton.setPrefSize(120, 120);&#10;//        recordButton.setStyle(&#10;//                &quot;-fx-background-color: rgba(255,255,255,0.2);&quot; +&#10;//                        &quot;-fx-background-radius: 60;&quot; +&#10;//                        &quot;-fx-border-color: rgba(255,255,255,0.3);&quot; +&#10;//                        &quot;-fx-border-width: 2;&quot; +&#10;//                        &quot;-fx-border-radius: 60;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 15, 0, 0, 3);&quot;&#10;//        );&#10;//&#10;//        // Microphone icon&#10;//        Label micIcon = new Label(&quot;&quot;);&#10;//        micIcon.setStyle(&#10;//                &quot;-fx-font-size: 40px;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot;&#10;//        );&#10;//        recordButton.setGraphic(micIcon);&#10;//&#10;//        // Simplified progress ring (less resource intensive)&#10;//        Circle progressRing = new Circle(65);&#10;//        progressRing.setFill(Color.TRANSPARENT);&#10;//        progressRing.setStroke(Color.web(&quot;#ffffff&quot;, 0.4));&#10;//        progressRing.setStrokeWidth(3);&#10;//        progressRing.setVisible(false);&#10;//&#10;//        // Simplified audio level indicator (fewer bars for better performance)&#10;//        HBox audioLevelContainer = new HBox(3);&#10;//        audioLevelContainer.setAlignment(Pos.CENTER);&#10;//        audioLevelContainer.setVisible(false);&#10;//&#10;//        Rectangle[] levelBars = new Rectangle[3]; // Reduced from 5 to 3 for better performance&#10;//        for (int i = 0; i &lt; levelBars.length; i++) {&#10;//            levelBars[i] = new Rectangle(6, 15 + i * 10);&#10;//            levelBars[i].setFill(Color.web(&quot;#4CAF50&quot;));&#10;//            levelBars[i].setArcWidth(3);&#10;//            levelBars[i].setArcHeight(3);&#10;//            audioLevelContainer.getChildren().add(levelBars[i]);&#10;//        }&#10;//&#10;//        // Timer label&#10;//        Label timerLabel = new Label(&quot;00:00&quot;);&#10;//        timerLabel.setStyle(&#10;//                &quot;-fx-font-size: 18px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-background-color: rgba(0,0,0,0.3);&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-padding: 8 16 8 16;&quot;&#10;//        );&#10;//        timerLabel.setVisible(false);&#10;//&#10;//        // Animation references for cleanup&#10;//        Timeline pulseAnimation = null;&#10;//        Timeline ringRotation = null;&#10;//        Timeline audioLevelAnimation = null;&#10;//        Timeline timer = null;&#10;//&#10;//        // Optimized animations with fewer keyframes&#10;//        pulseAnimation = new Timeline(&#10;//                new KeyFrame(Duration.ZERO, new KeyValue(recordButton.scaleXProperty(), 1.0)),&#10;//                new KeyFrame(Duration.millis(800), new KeyValue(recordButton.scaleXProperty(), 1.05)),&#10;//                new KeyFrame(Duration.millis(1600), new KeyValue(recordButton.scaleXProperty(), 1.0))&#10;//        );&#10;//        pulseAnimation.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        ringRotation = new Timeline(&#10;//                new KeyFrame(Duration.ZERO, new KeyValue(progressRing.rotateProperty(), 0)),&#10;//                new KeyFrame(Duration.seconds(3), new KeyValue(progressRing.rotateProperty(), 360))&#10;//        );&#10;//        ringRotation.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        // Simplified audio level animation with longer intervals&#10;//        audioLevelAnimation = new Timeline();&#10;//        for (int i = 0; i &lt; levelBars.length; i++) {&#10;//            final int index = i;&#10;//            KeyFrame kf = new KeyFrame(&#10;//                    Duration.millis(200 + i * 100), // Increased interval&#10;//                    e -&gt; {&#10;//                        double height = 15 + Math.random() * 25;&#10;//                        levelBars[index].setHeight(height);&#10;//                        levelBars[index].setFill(Color.web(height &gt; 30 ? &quot;#FF5722&quot; : &quot;#4CAF50&quot;));&#10;//                    }&#10;//            );&#10;//            audioLevelAnimation.getKeyFrames().add(kf);&#10;//        }&#10;//        audioLevelAnimation.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        // Timer with reference for cleanup&#10;//        timer = new Timeline();&#10;//        final int[] seconds = {0};&#10;//        timer.getKeyFrames().add(new KeyFrame(Duration.seconds(1), e -&gt; {&#10;//            seconds[0]++;&#10;//            int mins = seconds[0] / 60;&#10;//            int secs = seconds[0] % 60;&#10;//            timerLabel.setText(String.format(&quot;%02d:%02d&quot;, mins, secs));&#10;//        }));&#10;//        timer.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        // Store animation references for cleanup&#10;//        final Timeline finalPulseAnimation = pulseAnimation;&#10;//        final Timeline finalRingRotation = ringRotation;&#10;//        final Timeline finalAudioLevelAnimation = audioLevelAnimation;&#10;//        final Timeline finalTimer = timer;&#10;//&#10;//        // Method to stop all animations&#10;//        Runnable stopAllAnimations = () -&gt; {&#10;//            if (finalPulseAnimation != null) finalPulseAnimation.stop();&#10;//            if (finalRingRotation != null) finalRingRotation.stop();&#10;//            if (finalAudioLevelAnimation != null) finalAudioLevelAnimation.stop();&#10;//            if (finalTimer != null) finalTimer.stop();&#10;//        };&#10;//&#10;//        // Button event handlers with async processing&#10;//        recordButton.setOnMousePressed(event -&gt; {&#10;//            // Start recording asynchronously&#10;//            CompletableFuture.runAsync(() -&gt; {&#10;//                VoiceRecorder.setRecording(true);&#10;//                VoiceRecorder.captureAudio();&#10;//            });&#10;//&#10;//            // Update UI immediately&#10;//            Platform.runLater(() -&gt; {&#10;//                statusLabel.setText(&quot;Recording... Release to stop&quot;);&#10;//                recordButton.setStyle(&#10;//                        &quot;-fx-background-color: rgba(244,67,54,0.8);&quot; +&#10;//                                &quot;-fx-background-radius: 60;&quot; +&#10;//                                &quot;-fx-border-color: rgba(255,255,255,0.5);&quot; +&#10;//                                &quot;-fx-border-width: 3;&quot; +&#10;//                                &quot;-fx-border-radius: 60;&quot; +&#10;//                                &quot;-fx-cursor: hand;&quot; +&#10;//                                &quot;-fx-effect: dropshadow(gaussian, rgba(244,67,54,0.5), 20, 0, 0, 3);&quot;&#10;//                );&#10;//                micIcon.setText(&quot;⏹&quot;);&#10;//&#10;//                // Show recording indicators&#10;//                progressRing.setVisible(true);&#10;//                audioLevelContainer.setVisible(true);&#10;//                timerLabel.setVisible(true);&#10;//&#10;//                // Start animations&#10;//                finalPulseAnimation.play();&#10;//                finalRingRotation.play();&#10;//                finalAudioLevelAnimation.play();&#10;//                finalTimer.play();&#10;//                seconds[0] = 0;&#10;//            });&#10;//        });&#10;//&#10;//        recordButton.setOnMouseReleased(event -&gt; {&#10;//            // Stop animations immediately to prevent hanging&#10;//            stopAllAnimations.run();&#10;//&#10;//            // Update UI first&#10;//            statusLabel.setText(&quot;Processing voice message...&quot;);&#10;//            recordButton.setStyle(&#10;//                    &quot;-fx-background-color: rgba(76,175,80,0.8);&quot; +&#10;//                            &quot;-fx-background-radius: 60;&quot; +&#10;//                            &quot;-fx-border-color: rgba(255,255,255,0.5);&quot; +&#10;//                            &quot;-fx-border-width: 2;&quot; +&#10;//                            &quot;-fx-border-radius: 60;&quot; +&#10;//                            &quot;-fx-cursor: hand;&quot; +&#10;//                            &quot;-fx-effect: dropshadow(gaussian, rgba(76,175,80,0.5), 15, 0, 0, 3);&quot;&#10;//            );&#10;//            micIcon.setText(&quot;✓&quot;);&#10;//&#10;//            // Hide recording indicators&#10;//            progressRing.setVisible(false);&#10;//            audioLevelContainer.setVisible(false);&#10;//&#10;//            // Process recording asynchronously to prevent hanging&#10;//            CompletableFuture.supplyAsync(() -&gt; {&#10;//                VoiceRecorder.setRecording(false);&#10;//                return VoiceRecorder.getAudioByteArray();&#10;//            }).thenAcceptAsync(audioData -&gt; {&#10;//                // Update UI on JavaFX thread&#10;//                Platform.runLater(() -&gt; {&#10;//                    voiceData = audioData;&#10;//                    if (voiceData != null &amp;&amp; voiceData.length &gt; 0) {&#10;//                        statusLabel.setText(&quot;Voice message ready! &quot;);&#10;//&#10;//                        // Simple success feedback without heavy animations&#10;//                        statusLabel.setOpacity(0.7);&#10;//                        FadeTransition fadeIn = new FadeTransition(Duration.millis(200), statusLabel);&#10;//                        fadeIn.setFromValue(0.7);&#10;//                        fadeIn.setToValue(1.0);&#10;//                        fadeIn.play();&#10;//&#10;//                        // Quick auto-close&#10;//                        Timeline countdown = new Timeline();&#10;//                        final int[] count = {2}; // Reduced countdown time&#10;//                        countdown.getKeyFrames().add(new KeyFrame(Duration.seconds(1), e -&gt; {&#10;//                            count[0]--;&#10;//                            if (count[0] &gt; 0) {&#10;//                                statusLabel.setText(&quot;Closing in &quot; + count[0] + &quot;...&quot;);&#10;//                            } else {&#10;//                                recordingDialog.close();&#10;//                            }&#10;//                        }));&#10;//                        countdown.setCycleCount(2);&#10;//                        countdown.play();&#10;//                    } else {&#10;//                        statusLabel.setText(&quot;No audio detected. Try again!&quot;);&#10;//                        recordButton.setStyle(&#10;//                                &quot;-fx-background-color: rgba(255,255,255,0.2);&quot; +&#10;//                                        &quot;-fx-background-radius: 60;&quot; +&#10;//                                        &quot;-fx-border-color: rgba(255,255,255,0.3);&quot; +&#10;//                                        &quot;-fx-border-width: 2;&quot; +&#10;//                                        &quot;-fx-border-radius: 60;&quot; +&#10;//                                        &quot;-fx-cursor: hand;&quot; +&#10;//                                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 15, 0, 0, 3);&quot;&#10;//                        );&#10;//                        micIcon.setText(&quot;&quot;);&#10;//                        timerLabel.setVisible(false);&#10;//                    }&#10;//                });&#10;//            }).exceptionally(throwable -&gt; {&#10;//                // Handle errors gracefully&#10;//                Platform.runLater(() -&gt; {&#10;//                    statusLabel.setText(&quot;Error processing audio. Try again!&quot;);&#10;//                    recordButton.setStyle(&#10;//                            &quot;-fx-background-color: rgba(255,255,255,0.2);&quot; +&#10;//                                    &quot;-fx-background-radius: 60;&quot; +&#10;//                                    &quot;-fx-border-color: rgba(255,255,255,0.3);&quot; +&#10;//                                    &quot;-fx-border-width: 2;&quot; +&#10;//                                    &quot;-fx-border-radius: 60;&quot; +&#10;//                                    &quot;-fx-cursor: hand;&quot; +&#10;//                                    &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 15, 0, 0, 3);&quot;&#10;//                    );&#10;//                    micIcon.setText(&quot;&quot;);&#10;//                    timerLabel.setVisible(false);&#10;//                });&#10;//                return null;&#10;//            });&#10;//        });&#10;//&#10;//        // Stack button with progress ring&#10;//        StackPane buttonStack = new StackPane();&#10;//        buttonStack.getChildren().addAll(progressRing, recordButton, audioLevelContainer);&#10;//&#10;//        // Assemble content&#10;//        content.getChildren().addAll(&#10;//                titleLabel,&#10;//                statusLabel,&#10;//                buttonStack,&#10;//                timerLabel&#10;//        );&#10;//&#10;//        mainContainer.getChildren().addAll(header, content);&#10;//&#10;//        // Simplified entrance animation&#10;//        FadeTransition fadeIn = new FadeTransition(Duration.millis(200), mainContainer);&#10;//        fadeIn.setFromValue(0.0);&#10;//        fadeIn.setToValue(1.0);&#10;//&#10;//        ScaleTransition scaleIn = new ScaleTransition(Duration.millis(200), mainContainer);&#10;//        scaleIn.setFromX(0.9);&#10;//        scaleIn.setFromY(0.9);&#10;//        scaleIn.setToX(1.0);&#10;//        scaleIn.setToY(1.0);&#10;//&#10;//        ParallelTransition entrance = new ParallelTransition(fadeIn, scaleIn);&#10;//&#10;//        recordingDialog.getDialogPane().setContent(mainContainer);&#10;//        recordingDialog.getDialogPane().setStyle(&quot;-fx-background-color: transparent;&quot;);&#10;//&#10;//        // Cleanup on dialog close&#10;//        recordingDialog.setOnCloseRequest(e -&gt; {&#10;//            stopAllAnimations.run();&#10;//            if (VoiceRecorder.isRecording()) {&#10;//                VoiceRecorder.setRecording(false);&#10;//            }&#10;//        });&#10;//&#10;//        recordingDialog.show(); // Use show() instead of showAndWait() to prevent blocking&#10;//        entrance.play();&#10;//    }&#10;&#10;    public void leaveRoomHandler(ActionEvent event) {&#10;        try {&#10;            if(currentRoomId==null) {&#10;                showAlert(&quot;You are not in any room.&quot;);&#10;                return;&#10;            }&#10;//            System.out.println(&quot;running stuck&quot;);&#10;//            stopListenForMessages();&#10;//            System.out.println(&quot;not stuck&quot;);&#10;&#10;            NetworkUtil.getOut().writeObject(&quot;LEAVE:&quot;);&#10;            NetworkUtil.getOut().flush();&#10;&#10;            // Clear the message container&#10;            messageContainer.getChildren().clear();&#10;            // Reset room ID and label&#10;//            String response = (String) NetworkUtil.getIn().readObject();&#10;&#10;//            if (response.equals(&quot;LEFT&quot;)) {&#10;//                showAlert(&quot;You have left the room.&quot;);&#10;//                messages = null;&#10;//                roomLabel.setText(&quot;JOIN A ROOM&quot;);&#10;//                currentRoomId = null;&#10;//                leaveRoomBtn.setVisible(false);&#10;//                joinRoomBtn.setDisable(false);&#10;//                createRoomBtn.setDisable(false);&#10;//                populateMessages();&#10;//            } else {&#10;//                System.out.println(&quot;Response: &quot; + response);&#10;//                showAlert(&quot;Failed to leave room.&quot;);&#10;//                return;&#10;//            }&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to leave room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void videoCallHandler(ActionEvent event) {&#10;        try {&#10;            String room = roomLabel.getText();&#10;            if (room == null || room.isEmpty() || room.equals(&quot;JOIN A ROOM&quot;)) {&#10;                showAlert(&quot;Please join a room first.&quot;);&#10;                return;&#10;            }&#10;&#10;            if (videoCallBtn.getText().equals(&quot;RECEIVE CALL&quot;)) {&#10;                // Accept incoming call&#10;                NetworkUtil.getOut().writeObject(&quot;ACCEPT_CALL:&quot; + room);&#10;                NetworkUtil.getOut().flush();&#10;//                videoCallBtn.setText(&quot;IN A CALL&quot;);&#10;&#10;                //starting all videcall threads&#10;&#10;&#10;                return;&#10;            } else if (videoCallBtn.getText().equals(&quot;END CALL&quot;)) {&#10;&#10;&#10;                NetworkUtil.getOut().writeObject(&quot;END_CALL:&quot; + room);&#10;                NetworkUtil.getOut().flush();&#10;&#10;            } else {&#10;&#10;&#10;                // Send video call request&#10;                NetworkUtil.getOut().writeObject(&quot;VIDEO_CALL:&quot; + room);&#10;                NetworkUtil.getOut().flush();&#10;&#10;                videoCallBtn.setText(&quot;CALLING...&quot;);&#10;            }&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to initiate video call.&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.client.chat;&#10;&#10;import com.client.NetworkUtil;&#10;import com.client.Page;&#10;import com.client.Pages;&#10;import com.videoCall.AudioReceiver;&#10;import com.videoCall.AudioSender;&#10;import com.videoCall.VideoReceiver;&#10;import com.videoCall.VideoSender;&#10;import com.voiceMessage.VoicePlayback;&#10;import com.voiceMessage.VoiceRecorder;&#10;import javafx.animation.*;&#10;import javafx.application.Platform;&#10;import javafx.event.ActionEvent;&#10;import javafx.fxml.FXML;&#10;import javafx.fxml.FXMLLoader;&#10;import javafx.geometry.Insets;&#10;import javafx.geometry.Pos;&#10;import javafx.scene.Node;&#10;import javafx.scene.Parent;&#10;import javafx.scene.Scene;&#10;import javafx.scene.control.*;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;import javafx.scene.layout.*;&#10;import javafx.scene.paint.Color;&#10;import javafx.scene.shape.Circle;&#10;import javafx.scene.shape.Rectangle;&#10;import javafx.scene.text.Text;&#10;import javafx.scene.text.TextFlow;&#10;import javafx.stage.FileChooser;&#10;import javafx.stage.Stage;&#10;import javafx.stage.StageStyle;&#10;import javafx.util.Duration;&#10;import model.Message;&#10;import model.MessageType;&#10;import model.User;&#10;&#10;import javax.sound.midi.Sequencer;&#10;import javax.sound.sampled.LineUnavailableException;&#10;import java.io.ByteArrayInputStream;&#10;import java.io.File;&#10;import java.io.IOException;&#10;import java.io.ObjectInputStream;&#10;import java.nio.file.Files;&#10;import java.time.LocalDateTime;&#10;import java.time.LocalTime;&#10;import java.time.format.DateTimeFormatter;&#10;import java.util.ArrayList;&#10;import java.util.Base64;&#10;import java.util.List;&#10;import java.util.concurrent.CompletableFuture;&#10;&#10;public class ChatController {&#10;&#10;    public static ChatController chatController;&#10;&#10;    @FXML&#10;    private ImageView VoiceSend;&#10;    @FXML&#10;    private ImageView sendIcon;&#10;    @FXML&#10;    private Button settingsButton;&#10;    @FXML&#10;    private VBox messageContainer;&#10;    @FXML&#10;    private TextField messageField;&#10;    @FXML&#10;    private Button sendButton;&#10;    @FXML&#10;    private Label userName;&#10;    @FXML&#10;    private ImageView userImage;&#10;    @FXML&#10;    private Button joinRoomBtn;&#10;    @FXML&#10;    private Button createRoomBtn;&#10;    @FXML&#10;    private Button leaveRoomBtn;&#10;    @FXML&#10;    private TextField roomId;&#10;    @FXML&#10;    private TextField createRoomId;&#10;    @FXML&#10;    private Label roomLabel;&#10;    @FXML&#10;    private Button videoCallBtn;&#10;    @FXML&#10;    public ImageView video;&#10;&#10;&#10;    private List&lt;Message&gt; messages;&#10;    public static User currentUser;&#10;    public volatile boolean  isRecording = false;&#10;    private String base64ImageString ;&#10;    public  byte[] voiceData;&#10;    public volatile boolean isMsgListening = false;&#10;    public String currentRoomId;&#10;    // video call threads&#10;    VideoSender videoSenderThread = new VideoSender(&quot;127.0.0.1&quot;, 5555);&#10;    VideoReceiver videoReceiverThread = new VideoReceiver(video, 5556);&#10;    AudioSender audioSenderThread = new AudioSender(&quot;127.0.0.1&quot;, 5557);&#10;    AudioReceiver audioReceiverThread = new AudioReceiver(5558);&#10;&#10;&#10;    public static ImageView getImageViewFromBase64(String base64String) {&#10;        if (base64String == null || base64String.isEmpty()) {&#10;            return null;&#10;        }&#10;&#10;        String base64Data = base64String;&#10;        if (base64String.startsWith(&quot;data:image&quot;)) {&#10;            int commaIndex = base64String.indexOf(',');&#10;            if (commaIndex != -1) {&#10;                base64Data = base64String.substring(commaIndex + 1);&#10;            }&#10;        }&#10;&#10;        try {&#10;            byte[] decodedBytes = Base64.getDecoder().decode(base64Data);&#10;            ByteArrayInputStream inputStream = new ByteArrayInputStream(decodedBytes);&#10;            Image image = new Image(inputStream);&#10;            return new ImageView(image);&#10;        } catch (IllegalArgumentException e) {&#10;            System.err.println(&quot;Error decoding Base64 string: &quot; + e.getMessage());&#10;            return null;&#10;        }&#10;    }&#10;&#10;&#10;&#10;&#10;&#10;    @FXML&#10;    private void initialize() {&#10;&#10;        leaveRoomBtn.setVisible(false);&#10;        chatController = this;&#10;//        VoiceSend.setOnMouseClicked(event -&gt; {recordVoice();});&#10;        sendIcon.setOnMouseClicked(event -&gt; selectImage());&#10;        settingsButton.setOnAction(this::onSettingsClicked);&#10;        sendButton.setOnAction(e -&gt; sendMessage());&#10;        userName.setText(currentUser.getName());&#10;        userImage.setImage(getImageViewFromBase64(currentUser.getBase64ProfilePic()).getImage());&#10;    }&#10;&#10;    private void sendMessage() {&#10;&#10;&#10;        String text = messageField.getText().trim();&#10;&#10;        boolean hasImage = base64ImageString != null &amp;&amp; !base64ImageString.isEmpty();&#10;        boolean hasText = !text.isEmpty();&#10;        boolean hasVoice = voiceData != null &amp;&amp; voiceData.length != 0;// Placeholder for voice message logic&#10;        if (!hasText &amp;&amp; !hasImage &amp;&amp; !hasVoice) return;&#10;&#10;        if(hasText) {&#10;            try {&#10;                Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), currentUser.getName(), text, LocalDateTime.now());&#10;&#10;                NetworkUtil.getOut().writeObject(msg);&#10;                NetworkUtil.getOut().flush();&#10;                System.out.println(&quot;Received Message: &quot; + msg);&#10;&#10;                messageField.clear();&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                showAlert(&quot;Failed to send message.&quot;);&#10;            }&#10;        }&#10;        if(hasImage) {&#10;            try {&#10;                Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), base64ImageString, MessageType.IMAGE);&#10;                NetworkUtil.getOut().writeObject(msg);&#10;                NetworkUtil.getOut().flush();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                showAlert(&quot;Failed to send Image.&quot;);&#10;            }&#10;        }&#10;        if(hasVoice){&#10;            try{&#10;                Message msg = new Message(roomLabel.getText(), currentUser.getPhoneNumber(), voiceData, MessageType.VOICE);&#10;                NetworkUtil.getOut().writeObject(msg);&#10;                NetworkUtil.getOut().flush();&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                showAlert(&quot;Failed to send Image.&quot;);&#10;            }&#10;&#10;        }&#10;    }&#10;&#10;    private Thread messageListenerThread;&#10;&#10;    private void startMessageListener() {&#10;        stopListenForMessages(); // Stop any previous listener&#10;        isMsgListening = true;&#10;        messageListenerThread = new Thread(() -&gt; {&#10;            try {&#10;                while (isMsgListening) {&#10;                    ObjectInputStream in = NetworkUtil.getIn(); // Always get a fresh stream reference&#10;                    Object obj = in.readObject();&#10;&#10;                    if (obj instanceof Message msg &amp;&amp; msg.getRoomId().equals(roomId.getText())) {&#10;                        messages.add(msg);&#10;                        Platform.runLater(() -&gt; addMessageToUI(msg));&#10;                    } else if (obj instanceof String response) {&#10;//                        videoCallBtn.setText(response);&#10;                        System.out.println(response);&#10;                        if (response.equals(&quot;RECEIVE_CALL&quot;)) {&#10;                            Platform.runLater(() -&gt; {&#10;                                videoCallBtn.setText(&quot;RECEIVE CALL&quot;);&#10;                            });&#10;                        } else if (response.equals(&quot;FAILED&quot;)) {&#10;                            Platform.runLater(() -&gt; {&#10;                                videoCallBtn.setText(&quot;VIDEO CALL&quot;);&#10;                                showAlert(&quot;Failed to call.&quot;);&#10;                            });&#10;                        } else if (response.equals(&quot;WAITING&quot;)) {&#10;                            Platform.runLater(() -&gt; {&#10;                                videoCallBtn.setText(&quot;CALLING...&quot;);&#10;&#10;                            });&#10;                        } else if (response.equals(&quot;ACCEPT_CALL&quot;)) {&#10;                            Platform.runLater(() -&gt; {&#10;                                videoCallBtn.setText(&quot;END CALL&quot;);&#10;&#10;                                audioSenderThread.start();&#10;                                audioReceiverThread.start();&#10;                                videoSenderThread.start();&#10;                                videoReceiverThread.start();&#10;&#10;&#10;                            });&#10;                        } else if (response.equals(&quot;END_CALL&quot;)) {&#10;                            Platform.runLater(() -&gt; {&#10;                                videoCallBtn.setText(&quot;VIDEO CALL&quot;);&#10;&#10;                                // stop all threads&#10;                                videoSenderThread.stopThread();&#10;                                videoReceiverThread.stopThread();&#10;                                audioSenderThread.stopThread();&#10;                                audioReceiverThread.stopThread();&#10;&#10;&#10;                            });&#10;                        }else if (response.equals(&quot;LEFT&quot;)) {&#10;                            Platform.runLater(() -&gt; {&#10;&#10;                            showAlert(&quot;You have left the room.&quot;);&#10;                            messages = null;&#10;                            roomLabel.setText(&quot;JOIN A ROOM&quot;);&#10;                            currentRoomId = null;&#10;                            leaveRoomBtn.setVisible(false);&#10;                            joinRoomBtn.setDisable(false);&#10;                            createRoomBtn.setDisable(false);&#10;                            populateMessages();&#10;&#10;                            isMsgListening=false;&#10;                            });&#10;                        }&#10;                    }&#10;                }&#10;            } catch (Exception e) {&#10;                e.printStackTrace();&#10;                Platform.runLater(() -&gt; showAlert(&quot;Disconnected from server.&quot;));&#10;            }&#10;        });&#10;        messageListenerThread.setDaemon(true);&#10;        messageListenerThread.start();&#10;    }&#10;&#10;    private void listenForMessages() {&#10;        startMessageListener();&#10;    }&#10;&#10;    private void stopListenForMessages() {&#10;        isMsgListening = false;&#10;        if (messageListenerThread != null &amp;&amp; messageListenerThread.isAlive()) {&#10;            messageListenerThread.interrupt();&#10;        }&#10;    }&#10;&#10;    private void loadRoomHistory() throws Exception {&#10;&#10;        Object obj = NetworkUtil.getIn().readObject();&#10;        if (obj instanceof List&lt;?&gt; list) {&#10;            messages = (List&lt;Message&gt;) list;&#10;&#10;        } else {&#10;            if (obj instanceof String response) {&#10;                if (response.startsWith(&quot;JOINED:&quot;)) {&#10;                    messages = new ArrayList&lt;&gt;();&#10;                    System.out.println(&quot;Joined new created  room successfully.&quot;);&#10;                } else if (response.startsWith(&quot;FAIL&quot;)) {&#10;                    showAlert(&quot;Failed to join room. Room does not exist.&quot;);&#10;                } else {&#10;                    showAlert(&quot;Unexpected response: &quot; + response);&#10;                }&#10;            }&#10;        }&#10;&#10;    }&#10;&#10;    @FXML&#10;    private void onSettingsClicked(ActionEvent event) {&#10;        try {&#10;            new Page().Goto(Pages.SETTINGS);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;    }&#10;&#10;    // Build text content (show sender for others only)&#10;    private void addMessageBubble(String text, boolean mine, LocalTime time, String sender) {&#10;        // HBox to align the whole message bubble left/right&#10;        HBox messageContainer = new HBox();&#10;        messageContainer.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContainer.setPadding(new Insets(5, 10, 5, 10));&#10;&#10;        // Message Text (just the text content now)&#10;        Text messageText = new Text(text);&#10;        messageText.setStyle(&quot;-fx-fill: &quot; + (mine ? &quot;white&quot; : &quot;black&quot;) + &quot;; -fx-font-size: 14;&quot;);&#10;&#10;        // Message bubble styling&#10;        TextFlow messageBubble = new TextFlow(messageText);&#10;        messageBubble.setPadding(new Insets(10));&#10;        messageBubble.setMaxWidth(300); // Prevent stretching full width&#10;        messageBubble.setStyle(&#10;                mine&#10;                        ? &quot;-fx-background-color: #0084ff; -fx-background-radius: 15 0 15 15;&quot;&#10;                        : &quot;-fx-background-color: #8e24aa; -fx-background-radius: 0 15 15 15;&quot;&#10;        );&#10;&#10;        // Timestamp label&#10;        Label timeLabel = new Label(time.format(DateTimeFormatter.ofPattern(&quot;hh:mm a&quot;)));&#10;        timeLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#dddddd&quot;) + &quot;; -fx-font-size: 10;&quot;);&#10;&#10;        // VBox to stack sender (if not mine), bubble, and time&#10;        VBox messageContent = new VBox(3);&#10;        messageContent.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContent.setMaxWidth(Region.USE_PREF_SIZE);&#10;&#10;        // Add sender label above bubble for other users&#10;        if (!mine &amp;&amp; sender != null) {&#10;            Label senderLabel = new Label(sender);&#10;            senderLabel.setStyle(&quot;-fx-text-fill: #666666; -fx-font-size: 12; -fx-font-weight: bold;&quot;);&#10;            messageContent.getChildren().add(senderLabel);&#10;        }&#10;&#10;        messageContent.getChildren().addAll(messageBubble, timeLabel);&#10;        HBox.setHgrow(messageContent, Priority.NEVER); // prevent stretching&#10;&#10;        // Final add to message container&#10;        messageContainer.getChildren().add(messageContent);&#10;        this.messageContainer.getChildren().add(messageContainer); // &lt;-- your outer VBox holding all messages&#10;    }&#10;&#10;    private void addMessageToUI(Message msg) {&#10;            boolean mine = msg.getSenderPhone().equals(currentUser.getPhoneNumber());&#10;            String sender = mine ? &quot;You&quot; : msg.getSenderName();&#10;            LocalTime time = msg.getTimestamp().toLocalTime();&#10;            if(msg.getType().equals(MessageType.IMAGE)) {&#10;                addImageBubble(msg.getImage(), mine, time, sender);&#10;            }else if(msg.getType().equals(MessageType.VOICE)) {&#10;                addVoiceBubble(msg.getVoiceData(), mine, time, sender);&#10;            }&#10;            else {&#10;                System.out.println(&quot;Reached in the addMessageToUI.....................&quot;);&#10;                addMessageBubble(msg.getContent(), mine, time, sender);&#10;            }&#10;        }&#10;&#10;    private void populateMessages() {&#10;        messageContainer.getChildren().clear();&#10;        if (messages != null) {&#10;            if (messages.size() == 0) {&#10;                System.out.println(&quot;No messages in this room yet.&quot;);&#10;                return;&#10;            }&#10;            for (Message msg : messages) {&#10;                addMessageToUI(msg);&#10;            }&#10;        }&#10;    }&#10;&#10;    private void showAlert(String msg) {&#10;        new Alert(Alert.AlertType.ERROR, msg).showAndWait();&#10;    }&#10;&#10;    @FXML&#10;    private void loginBackHandler(ActionEvent event) {&#10;        // Handle back to login&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;LOGOUT:&quot; + currentUser.getPhoneNumber());&#10;            NetworkUtil.getOut().flush();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to logout.&quot;);&#10;        }&#10;&#10;        // Switch to login scene&#10;        try {&#10;            new Page().Goto(Pages.LOGIN);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(e);&#10;        }&#10;&#10;    }&#10;&#10;    public void createRoomHandler(ActionEvent event) {&#10;        String newRoomId = createRoomId.getText().trim();&#10;        if (newRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;CREATE_ROOM:&quot; + newRoomId);&#10;            NetworkUtil.getOut().flush();&#10;//            roomLabel.setText(&quot;Current Room: &quot; + roomId);&#10;//            loadRoomHistory();&#10;//            roomLabel.setText(newRoomId);&#10;//            populateMessages();&#10;            String response = (String) NetworkUtil.getIn().readObject();&#10;            if (response.startsWith(&quot;CREATED:&quot;)) {&#10;                System.out.println(&quot;Room created successfully.&quot;);&#10;            }&#10;            else {&#10;                showAlert(&quot;Failed to create room.&quot;);&#10;            }&#10;&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to create room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void joinRoomHandler(ActionEvent event) {&#10;        String joiningRoomId = roomId.getText().trim();&#10;        if (joiningRoomId.isEmpty()) {&#10;            showAlert(&quot;Room ID cannot be empty.&quot;);&#10;            return;&#10;        }&#10;&#10;        try {&#10;            NetworkUtil.getOut().writeObject(&quot;JOIN:&quot; + joiningRoomId);&#10;            NetworkUtil.getOut().flush();&#10;            loadRoomHistory();&#10;            roomLabel.setText(joiningRoomId);&#10;            currentRoomId = joiningRoomId;&#10;            leaveRoomBtn.setVisible(true);&#10;            joinRoomBtn.setDisable(true);&#10;            createRoomBtn.setDisable(true);&#10;            populateMessages();&#10;            listenForMessages(); // This now always starts a fresh listener&#10;            createRoomId.clear();&#10;            roomId.clear();&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to join room.&quot;);&#10;        }&#10;    }&#10;&#10;    //To play Voice&#10;    private void addVoiceBubble(byte[] voiceData, boolean mine, LocalTime time, String sender) {&#10;        // HBox to align the whole message bubble left/right&#10;        HBox messageContainer = new HBox();&#10;        messageContainer.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContainer.setPadding(new Insets(5, 10, 5, 10));&#10;&#10;        // Voice control elements&#10;        HBox voiceControls = new HBox(10);&#10;        voiceControls.setAlignment(Pos.CENTER_LEFT);&#10;        voiceControls.setPadding(new Insets(10));&#10;&#10;        // Play button&#10;        Button playButton = new Button(&quot;▶&quot;);&#10;        playButton.setStyle(&quot;-fx-font-size: 16px; -fx-background-color: transparent; -fx-text-fill: &quot; +&#10;                (mine ? &quot;white&quot; : &quot;black&quot;) + &quot;; -fx-cursor: hand;&quot;);&#10;&#10;        // Voice duration/status label&#10;        Label durationLabel = new Label(&quot;Voice Message&quot;);&#10;        durationLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;white&quot; : &quot;black&quot;) + &quot;; -fx-font-size: 12px;&quot;);&#10;&#10;        // Waveform representation (simple visual)&#10;        Label waveformLabel = new Label(&quot;♪ ♫ ♪ ♫ ♪&quot;);&#10;        waveformLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#bbbbbb&quot;) + &quot;; -fx-font-size: 10px;&quot;);&#10;&#10;        voiceControls.getChildren().addAll(playButton, durationLabel, waveformLabel);&#10;&#10;        // Message bubble styling for voice&#10;        VBox voiceBubble = new VBox(voiceControls);&#10;        voiceBubble.setPadding(new Insets(5));&#10;        voiceBubble.setMaxWidth(250);&#10;        voiceBubble.setStyle(&#10;                mine&#10;                        ? &quot;-fx-background-color: #0084ff; -fx-background-radius: 15 0 15 15;&quot;&#10;                        : &quot;-fx-background-color: #8e24aa; -fx-background-radius: 0 15 15 15;&quot;&#10;        );&#10;&#10;        // Play button functionality&#10;        playButton.setOnAction(e -&gt; {&#10;            if (playButton.getText().equals(&quot;▶&quot;)) {&#10;                playButton.setText(&quot;⏸&quot;);&#10;                durationLabel.setText(&quot;Playing...&quot;);&#10;                VoicePlayback.playAudio(voiceData);&#10;&#10;                // Simulate playback duration&#10;                new Thread(() -&gt; {&#10;                    try {&#10;                        Thread.sleep(3000); // Simulate 3 seconds of playback&#10;                        Platform.runLater(() -&gt; {&#10;                            playButton.setText(&quot;▶&quot;);&#10;                            durationLabel.setText(&quot;Voice Message&quot;);&#10;                        });&#10;                    } catch (InterruptedException ex) {&#10;                        Thread.currentThread().interrupt();&#10;                    }&#10;                }).start();&#10;            } else {&#10;                playButton.setText(&quot;▶&quot;);&#10;                durationLabel.setText(&quot;Voice Message&quot;);&#10;                // TODO: Stop voice playback&#10;            }&#10;        });&#10;&#10;        // Timestamp label&#10;        Label timeLabel = new Label(time.format(DateTimeFormatter.ofPattern(&quot;hh:mm a&quot;)));&#10;        timeLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#dddddd&quot;) + &quot;; -fx-font-size: 10;&quot;);&#10;&#10;        // VBox to stack sender (if not mine), bubble, and time&#10;        VBox messageContent = new VBox(3);&#10;        messageContent.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContent.setMaxWidth(Region.USE_PREF_SIZE);&#10;&#10;        // Add sender label above bubble for other users&#10;        if (!mine &amp;&amp; sender != null) {&#10;            Label senderLabel = new Label(sender);&#10;            senderLabel.setStyle(&quot;-fx-text-fill: #666666; -fx-font-size: 12; -fx-font-weight: bold;&quot;);&#10;            messageContent.getChildren().add(senderLabel);&#10;        }&#10;&#10;        messageContent.getChildren().addAll(voiceBubble, timeLabel);&#10;        HBox.setHgrow(messageContent, Priority.NEVER); // prevent stretching&#10;&#10;        // Final add to message container&#10;        messageContainer.getChildren().add(messageContent);&#10;        this.messageContainer.getChildren().add(messageContainer);&#10;    }&#10;&#10;&#10;    //To show image&#10;    private void addImageBubble(String base64Image, boolean mine, LocalTime time, String sender) {&#10;        // HBox to align the whole message bubble left/right&#10;        HBox messageContainer = new HBox();&#10;        messageContainer.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContainer.setPadding(new Insets(5, 10, 5, 10));&#10;&#10;        // Image view from base64&#10;        ImageView imageView = getImageViewFromBase64(base64Image);&#10;        if (imageView == null) {&#10;            // Fallback to text if image can't be loaded&#10;            addMessageBubble(&quot;Image could not be loaded&quot;, mine, time, sender);&#10;            return;&#10;        }&#10;&#10;        // Set image size constraints&#10;        imageView.setFitWidth(200);&#10;        imageView.setFitHeight(150);&#10;        imageView.setPreserveRatio(true);&#10;        imageView.setSmooth(true);&#10;&#10;        // Message bubble styling for image&#10;        VBox imageBubble = new VBox(imageView);&#10;        imageBubble.setPadding(new Insets(5));&#10;        imageBubble.setMaxWidth(220);&#10;        imageBubble.setStyle(&#10;                mine&#10;                        ? &quot;-fx-background-color: #0084ff; -fx-background-radius: 15 0 15 15;&quot;&#10;                        : &quot;-fx-background-color: #8e24aa; -fx-background-radius: 0 15 15 15;&quot;&#10;        );&#10;&#10;        // Timestamp label&#10;        Label timeLabel = new Label(time.format(DateTimeFormatter.ofPattern(&quot;hh:mm a&quot;)));&#10;        timeLabel.setStyle(&quot;-fx-text-fill: &quot; + (mine ? &quot;#aad4ff&quot; : &quot;#dddddd&quot;) + &quot;; -fx-font-size: 10;&quot;);&#10;&#10;        // VBox to stack sender (if not mine), bubble, and time&#10;        VBox messageContent = new VBox(3);&#10;        messageContent.setAlignment(mine ? Pos.CENTER_RIGHT : Pos.CENTER_LEFT);&#10;        messageContent.setMaxWidth(Region.USE_PREF_SIZE);&#10;&#10;        // Add sender label above bubble for other users&#10;        if (!mine &amp;&amp; sender != null) {&#10;            Label senderLabel = new Label(sender);&#10;            senderLabel.setStyle(&quot;-fx-text-fill: #666666; -fx-font-size: 12; -fx-font-weight: bold;&quot;);&#10;            messageContent.getChildren().add(senderLabel);&#10;        }&#10;&#10;        messageContent.getChildren().addAll(imageBubble, timeLabel);&#10;        HBox.setHgrow(messageContent, Priority.NEVER); // prevent stretching&#10;&#10;        // Final add to message container&#10;        messageContainer.getChildren().add(messageContent);&#10;        this.messageContainer.getChildren().add(messageContainer); // &lt;-- your outer VBox holding all messages&#10;    }&#10;&#10;    private void selectImage() {&#10;        FileChooser fileChooser = new FileChooser();&#10;        fileChooser.setTitle(&quot;Select Image&quot;);&#10;        fileChooser.getExtensionFilters().addAll(&#10;                new FileChooser.ExtensionFilter(&quot;Image Files&quot;, &quot;*.png&quot;, &quot;*.jpg&quot;, &quot;*.jpeg&quot;, &quot;*.gif&quot;, &quot;*.bmp&quot;)&#10;        );&#10;&#10;        Stage stage = (Stage) sendIcon.getScene().getWindow();&#10;        File file = fileChooser.showOpenDialog(stage);&#10;&#10;        if (file != null) {&#10;            try {&#10;                byte[] imageBytes = Files.readAllBytes(file.toPath());&#10;                base64ImageString = Base64.getEncoder().encodeToString(imageBytes);&#10;                showAlert(&quot;Image selected successfully!&quot;);&#10;            } catch (Exception e) {&#10;                showAlert(&quot;Failed to load image: &quot; + e.getMessage());&#10;            }&#10;        }&#10;    }&#10;&#10;//    private void recordVoice() {&#10;//        // Create custom dialog&#10;//        Dialog&lt;Void&gt; recordingDialog = new Dialog&lt;&gt;();&#10;//        recordingDialog.setTitle(&quot;Voice Message&quot;);&#10;//        recordingDialog.initStyle(StageStyle.UNDECORATED);&#10;//&#10;//        // Main container with gradient background&#10;//        VBox mainContainer = new VBox();&#10;//        mainContainer.setPrefSize(400, 300);&#10;//        mainContainer.setStyle(&#10;//                &quot;-fx-background-color: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&quot; +&#10;//                        &quot;-fx-background-radius: 20;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 20, 0, 0, 5);&quot;&#10;//        );&#10;//&#10;//        // Header with close button&#10;//        HBox header = new HBox();&#10;//        header.setAlignment(Pos.CENTER_RIGHT);&#10;//        header.setPadding(new Insets(15, 20, 0, 20));&#10;//&#10;//        Button closeButton = new Button(&quot;✕&quot;);&#10;//        closeButton.setStyle(&#10;//                &quot;-fx-background-color: #ff4444;&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-padding: 5 10 5 10;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 5, 0, 0, 2);&quot;&#10;//        );&#10;//        closeButton.setOnMouseEntered(e -&gt; closeButton.setStyle(&#10;//                &quot;-fx-background-color: #ff6666;&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-padding: 5 10 5 10;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.4), 8, 0, 0, 3);&quot;&#10;//        ));&#10;//        closeButton.setOnMouseExited(e -&gt; closeButton.setStyle(&#10;//                &quot;-fx-background-color: #ff4444;&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-padding: 5 10 5 10;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 5, 0, 0, 2);&quot;&#10;//        ));&#10;//        closeButton.setOnAction(e -&gt; {&#10;//            // Stop all animations immediately;&#10;//            if (VoiceRecorder.isRecording()) {&#10;//                VoiceRecorder.setRecording(false);&#10;//            }&#10;//            recordingDialog.close();&#10;//            // Force stop recording if active&#10;//            if (VoiceRecorder.isRecording()) {&#10;//                VoiceRecorder.setRecording(false);&#10;//            }&#10;//        });&#10;//        header.getChildren().add(closeButton);&#10;//&#10;//        // Content area&#10;//        VBox content = new VBox(20);&#10;//        content.setAlignment(Pos.CENTER);&#10;//        content.setPadding(new Insets(20, 40, 40, 40));&#10;//&#10;//        // Title&#10;//        Label titleLabel = new Label(&quot; Voice Message&quot;);&#10;//        titleLabel.setStyle(&#10;//                &quot;-fx-font-size: 24px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.5), 2, 0, 0, 1);&quot;&#10;//        );&#10;//&#10;//        // Status label with smooth transitions&#10;//        Label statusLabel = new Label(&quot;Tap and hold to record&quot;);&#10;//        statusLabel.setStyle(&#10;//                &quot;-fx-font-size: 16px;&quot; +&#10;//                        &quot;-fx-text-fill: rgba(255,255,255,0.9);&quot; +&#10;//                        &quot;-fx-text-alignment: center;&quot;&#10;//        );&#10;//&#10;//        // Recording button with animated effects&#10;//        Button recordButton = new Button();&#10;//        recordButton.setPrefSize(120, 120);&#10;//        recordButton.setStyle(&#10;//                &quot;-fx-background-color: rgba(255,255,255,0.2);&quot; +&#10;//                        &quot;-fx-background-radius: 60;&quot; +&#10;//                        &quot;-fx-border-color: rgba(255,255,255,0.3);&quot; +&#10;//                        &quot;-fx-border-width: 2;&quot; +&#10;//                        &quot;-fx-border-radius: 60;&quot; +&#10;//                        &quot;-fx-cursor: hand;&quot; +&#10;//                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 15, 0, 0, 3);&quot;&#10;//        );&#10;//&#10;//        // Microphone icon&#10;//        Label micIcon = new Label(&quot;&quot;);&#10;//        micIcon.setStyle(&#10;//                &quot;-fx-font-size: 40px;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot;&#10;//        );&#10;//        recordButton.setGraphic(micIcon);&#10;//&#10;//        // Simplified progress ring (less resource intensive)&#10;//        Circle progressRing = new Circle(65);&#10;//        progressRing.setFill(Color.TRANSPARENT);&#10;//        progressRing.setStroke(Color.web(&quot;#ffffff&quot;, 0.4));&#10;//        progressRing.setStrokeWidth(3);&#10;//        progressRing.setVisible(false);&#10;//&#10;//        // Simplified audio level indicator (fewer bars for better performance)&#10;//        HBox audioLevelContainer = new HBox(3);&#10;//        audioLevelContainer.setAlignment(Pos.CENTER);&#10;//        audioLevelContainer.setVisible(false);&#10;//&#10;//        Rectangle[] levelBars = new Rectangle[3]; // Reduced from 5 to 3 for better performance&#10;//        for (int i = 0; i &lt; levelBars.length; i++) {&#10;//            levelBars[i] = new Rectangle(6, 15 + i * 10);&#10;//            levelBars[i].setFill(Color.web(&quot;#4CAF50&quot;));&#10;//            levelBars[i].setArcWidth(3);&#10;//            levelBars[i].setArcHeight(3);&#10;//            audioLevelContainer.getChildren().add(levelBars[i]);&#10;//        }&#10;//&#10;//        // Timer label&#10;//        Label timerLabel = new Label(&quot;00:00&quot;);&#10;//        timerLabel.setStyle(&#10;//                &quot;-fx-font-size: 18px;&quot; +&#10;//                        &quot;-fx-font-weight: bold;&quot; +&#10;//                        &quot;-fx-text-fill: white;&quot; +&#10;//                        &quot;-fx-background-color: rgba(0,0,0,0.3);&quot; +&#10;//                        &quot;-fx-background-radius: 15;&quot; +&#10;//                        &quot;-fx-padding: 8 16 8 16;&quot;&#10;//        );&#10;//        timerLabel.setVisible(false);&#10;//&#10;//        // Animation references for cleanup&#10;//        Timeline pulseAnimation = null;&#10;//        Timeline ringRotation = null;&#10;//        Timeline audioLevelAnimation = null;&#10;//        Timeline timer = null;&#10;//&#10;//        // Optimized animations with fewer keyframes&#10;//        pulseAnimation = new Timeline(&#10;//                new KeyFrame(Duration.ZERO, new KeyValue(recordButton.scaleXProperty(), 1.0)),&#10;//                new KeyFrame(Duration.millis(800), new KeyValue(recordButton.scaleXProperty(), 1.05)),&#10;//                new KeyFrame(Duration.millis(1600), new KeyValue(recordButton.scaleXProperty(), 1.0))&#10;//        );&#10;//        pulseAnimation.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        ringRotation = new Timeline(&#10;//                new KeyFrame(Duration.ZERO, new KeyValue(progressRing.rotateProperty(), 0)),&#10;//                new KeyFrame(Duration.seconds(3), new KeyValue(progressRing.rotateProperty(), 360))&#10;//        );&#10;//        ringRotation.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        // Simplified audio level animation with longer intervals&#10;//        audioLevelAnimation = new Timeline();&#10;//        for (int i = 0; i &lt; levelBars.length; i++) {&#10;//            final int index = i;&#10;//            KeyFrame kf = new KeyFrame(&#10;//                    Duration.millis(200 + i * 100), // Increased interval&#10;//                    e -&gt; {&#10;//                        double height = 15 + Math.random() * 25;&#10;//                        levelBars[index].setHeight(height);&#10;//                        levelBars[index].setFill(Color.web(height &gt; 30 ? &quot;#FF5722&quot; : &quot;#4CAF50&quot;));&#10;//                    }&#10;//            );&#10;//            audioLevelAnimation.getKeyFrames().add(kf);&#10;//        }&#10;//        audioLevelAnimation.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        // Timer with reference for cleanup&#10;//        timer = new Timeline();&#10;//        final int[] seconds = {0};&#10;//        timer.getKeyFrames().add(new KeyFrame(Duration.seconds(1), e -&gt; {&#10;//            seconds[0]++;&#10;//            int mins = seconds[0] / 60;&#10;//            int secs = seconds[0] % 60;&#10;//            timerLabel.setText(String.format(&quot;%02d:%02d&quot;, mins, secs));&#10;//        }));&#10;//        timer.setCycleCount(Timeline.INDEFINITE);&#10;//&#10;//        // Store animation references for cleanup&#10;//        final Timeline finalPulseAnimation = pulseAnimation;&#10;//        final Timeline finalRingRotation = ringRotation;&#10;//        final Timeline finalAudioLevelAnimation = audioLevelAnimation;&#10;//        final Timeline finalTimer = timer;&#10;//&#10;//        // Method to stop all animations&#10;//        Runnable stopAllAnimations = () -&gt; {&#10;//            if (finalPulseAnimation != null) finalPulseAnimation.stop();&#10;//            if (finalRingRotation != null) finalRingRotation.stop();&#10;//            if (finalAudioLevelAnimation != null) finalAudioLevelAnimation.stop();&#10;//            if (finalTimer != null) finalTimer.stop();&#10;//        };&#10;//&#10;//        // Button event handlers with async processing&#10;//        recordButton.setOnMousePressed(event -&gt; {&#10;//            // Start recording asynchronously&#10;//            CompletableFuture.runAsync(() -&gt; {&#10;//                VoiceRecorder.setRecording(true);&#10;//                VoiceRecorder.captureAudio();&#10;//            });&#10;//&#10;//            // Update UI immediately&#10;//            Platform.runLater(() -&gt; {&#10;//                statusLabel.setText(&quot;Recording... Release to stop&quot;);&#10;//                recordButton.setStyle(&#10;//                        &quot;-fx-background-color: rgba(244,67,54,0.8);&quot; +&#10;//                                &quot;-fx-background-radius: 60;&quot; +&#10;//                                &quot;-fx-border-color: rgba(255,255,255,0.5);&quot; +&#10;//                                &quot;-fx-border-width: 3;&quot; +&#10;//                                &quot;-fx-border-radius: 60;&quot; +&#10;//                                &quot;-fx-cursor: hand;&quot; +&#10;//                                &quot;-fx-effect: dropshadow(gaussian, rgba(244,67,54,0.5), 20, 0, 0, 3);&quot;&#10;//                );&#10;//                micIcon.setText(&quot;⏹&quot;);&#10;//&#10;//                // Show recording indicators&#10;//                progressRing.setVisible(true);&#10;//                audioLevelContainer.setVisible(true);&#10;//                timerLabel.setVisible(true);&#10;//&#10;//                // Start animations&#10;//                finalPulseAnimation.play();&#10;//                finalRingRotation.play();&#10;//                finalAudioLevelAnimation.play();&#10;//                finalTimer.play();&#10;//                seconds[0] = 0;&#10;//            });&#10;//        });&#10;//&#10;//        recordButton.setOnMouseReleased(event -&gt; {&#10;//            // Stop animations immediately to prevent hanging&#10;//            stopAllAnimations.run();&#10;//&#10;//            // Update UI first&#10;//            statusLabel.setText(&quot;Processing voice message...&quot;);&#10;//            recordButton.setStyle(&#10;//                    &quot;-fx-background-color: rgba(76,175,80,0.8);&quot; +&#10;//                            &quot;-fx-background-radius: 60;&quot; +&#10;//                            &quot;-fx-border-color: rgba(255,255,255,0.5);&quot; +&#10;//                            &quot;-fx-border-width: 2;&quot; +&#10;//                            &quot;-fx-border-radius: 60;&quot; +&#10;//                            &quot;-fx-cursor: hand;&quot; +&#10;//                            &quot;-fx-effect: dropshadow(gaussian, rgba(76,175,80,0.5), 15, 0, 0, 3);&quot;&#10;//            );&#10;//            micIcon.setText(&quot;✓&quot;);&#10;//&#10;//            // Hide recording indicators&#10;//            progressRing.setVisible(false);&#10;//            audioLevelContainer.setVisible(false);&#10;//&#10;//            // Process recording asynchronously to prevent hanging&#10;//            CompletableFuture.supplyAsync(() -&gt; {&#10;//                VoiceRecorder.setRecording(false);&#10;//                return VoiceRecorder.getAudioByteArray();&#10;//            }).thenAcceptAsync(audioData -&gt; {&#10;//                // Update UI on JavaFX thread&#10;//                Platform.runLater(() -&gt; {&#10;//                    voiceData = audioData;&#10;//                    if (voiceData != null &amp;&amp; voiceData.length &gt; 0) {&#10;//                        statusLabel.setText(&quot;Voice message ready! &quot;);&#10;//&#10;//                        // Simple success feedback without heavy animations&#10;//                        statusLabel.setOpacity(0.7);&#10;//                        FadeTransition fadeIn = new FadeTransition(Duration.millis(200), statusLabel);&#10;//                        fadeIn.setFromValue(0.7);&#10;//                        fadeIn.setToValue(1.0);&#10;//                        fadeIn.play();&#10;//&#10;//                        // Quick auto-close&#10;//                        Timeline countdown = new Timeline();&#10;//                        final int[] count = {2}; // Reduced countdown time&#10;//                        countdown.getKeyFrames().add(new KeyFrame(Duration.seconds(1), e -&gt; {&#10;//                            count[0]--;&#10;//                            if (count[0] &gt; 0) {&#10;//                                statusLabel.setText(&quot;Closing in &quot; + count[0] + &quot;...&quot;);&#10;//                            } else {&#10;//                                recordingDialog.close();&#10;//                            }&#10;//                        }));&#10;//                        countdown.setCycleCount(2);&#10;//                        countdown.play();&#10;//                    } else {&#10;//                        statusLabel.setText(&quot;No audio detected. Try again!&quot;);&#10;//                        recordButton.setStyle(&#10;//                                &quot;-fx-background-color: rgba(255,255,255,0.2);&quot; +&#10;//                                        &quot;-fx-background-radius: 60;&quot; +&#10;//                                        &quot;-fx-border-color: rgba(255,255,255,0.3);&quot; +&#10;//                                        &quot;-fx-border-width: 2;&quot; +&#10;//                                        &quot;-fx-border-radius: 60;&quot; +&#10;//                                        &quot;-fx-cursor: hand;&quot; +&#10;//                                        &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 15, 0, 0, 3);&quot;&#10;//                        );&#10;//                        micIcon.setText(&quot;&quot;);&#10;//                        timerLabel.setVisible(false);&#10;//                    }&#10;//                });&#10;//            }).exceptionally(throwable -&gt; {&#10;//                // Handle errors gracefully&#10;//                Platform.runLater(() -&gt; {&#10;//                    statusLabel.setText(&quot;Error processing audio. Try again!&quot;);&#10;//                    recordButton.setStyle(&#10;//                            &quot;-fx-background-color: rgba(255,255,255,0.2);&quot; +&#10;//                                    &quot;-fx-background-radius: 60;&quot; +&#10;//                                    &quot;-fx-border-color: rgba(255,255,255,0.3);&quot; +&#10;//                                    &quot;-fx-border-width: 2;&quot; +&#10;//                                    &quot;-fx-border-radius: 60;&quot; +&#10;//                                    &quot;-fx-cursor: hand;&quot; +&#10;//                                    &quot;-fx-effect: dropshadow(gaussian, rgba(0,0,0,0.3), 15, 0, 0, 3);&quot;&#10;//                    );&#10;//                    micIcon.setText(&quot;&quot;);&#10;//                    timerLabel.setVisible(false);&#10;//                });&#10;//                return null;&#10;//            });&#10;//        });&#10;//&#10;//        // Stack button with progress ring&#10;//        StackPane buttonStack = new StackPane();&#10;//        buttonStack.getChildren().addAll(progressRing, recordButton, audioLevelContainer);&#10;//&#10;//        // Assemble content&#10;//        content.getChildren().addAll(&#10;//                titleLabel,&#10;//                statusLabel,&#10;//                buttonStack,&#10;//                timerLabel&#10;//        );&#10;//&#10;//        mainContainer.getChildren().addAll(header, content);&#10;//&#10;//        // Simplified entrance animation&#10;//        FadeTransition fadeIn = new FadeTransition(Duration.millis(200), mainContainer);&#10;//        fadeIn.setFromValue(0.0);&#10;//        fadeIn.setToValue(1.0);&#10;//&#10;//        ScaleTransition scaleIn = new ScaleTransition(Duration.millis(200), mainContainer);&#10;//        scaleIn.setFromX(0.9);&#10;//        scaleIn.setFromY(0.9);&#10;//        scaleIn.setToX(1.0);&#10;//        scaleIn.setToY(1.0);&#10;//&#10;//        ParallelTransition entrance = new ParallelTransition(fadeIn, scaleIn);&#10;//&#10;//        recordingDialog.getDialogPane().setContent(mainContainer);&#10;//        recordingDialog.getDialogPane().setStyle(&quot;-fx-background-color: transparent;&quot;);&#10;//&#10;//        // Cleanup on dialog close&#10;//        recordingDialog.setOnCloseRequest(e -&gt; {&#10;//            stopAllAnimations.run();&#10;//            if (VoiceRecorder.isRecording()) {&#10;//                VoiceRecorder.setRecording(false);&#10;//            }&#10;//        });&#10;//&#10;//        recordingDialog.show(); // Use show() instead of showAndWait() to prevent blocking&#10;//        entrance.play();&#10;//    }&#10;&#10;    public void leaveRoomHandler(ActionEvent event) {&#10;        try {&#10;            if(currentRoomId==null) {&#10;                showAlert(&quot;You are not in any room.&quot;);&#10;                return;&#10;            }&#10;//            System.out.println(&quot;running stuck&quot;);&#10;//            stopListenForMessages();&#10;//            System.out.println(&quot;not stuck&quot;);&#10;&#10;            NetworkUtil.getOut().writeObject(&quot;LEAVE:&quot;);&#10;            NetworkUtil.getOut().flush();&#10;&#10;            // Clear the message container&#10;            messageContainer.getChildren().clear();&#10;            // Reset room ID and label&#10;//            String response = (String) NetworkUtil.getIn().readObject();&#10;&#10;//            if (response.equals(&quot;LEFT&quot;)) {&#10;//                showAlert(&quot;You have left the room.&quot;);&#10;//                messages = null;&#10;//                roomLabel.setText(&quot;JOIN A ROOM&quot;);&#10;//                currentRoomId = null;&#10;//                leaveRoomBtn.setVisible(false);&#10;//                joinRoomBtn.setDisable(false);&#10;//                createRoomBtn.setDisable(false);&#10;//                populateMessages();&#10;//            } else {&#10;//                System.out.println(&quot;Response: &quot; + response);&#10;//                showAlert(&quot;Failed to leave room.&quot;);&#10;//                return;&#10;//            }&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to leave room.&quot;);&#10;        }&#10;    }&#10;&#10;    public void videoCallHandler(ActionEvent event) {&#10;        try {&#10;            String room = roomLabel.getText();&#10;            if (room == null || room.isEmpty() || room.equals(&quot;JOIN A ROOM&quot;)) {&#10;                showAlert(&quot;Please join a room first.&quot;);&#10;                return;&#10;            }&#10;&#10;            if (videoCallBtn.getText().equals(&quot;RECEIVE CALL&quot;)) {&#10;                // Accept incoming call&#10;                NetworkUtil.getOut().writeObject(&quot;ACCEPT_CALL:&quot; + room);&#10;                NetworkUtil.getOut().flush();&#10;//                videoCallBtn.setText(&quot;IN A CALL&quot;);&#10;&#10;                //starting all videcall threads&#10;&#10;&#10;                return;&#10;            } else if (videoCallBtn.getText().equals(&quot;END CALL&quot;)) {&#10;&#10;&#10;                NetworkUtil.getOut().writeObject(&quot;END_CALL:&quot; + room);&#10;                NetworkUtil.getOut().flush();&#10;&#10;            } else {&#10;&#10;&#10;                // Send video call request&#10;                NetworkUtil.getOut().writeObject(&quot;VIDEO_CALL:&quot; + room);&#10;                NetworkUtil.getOut().flush();&#10;&#10;                videoCallBtn.setText(&quot;CALLING...&quot;);&#10;            }&#10;&#10;&#10;        } catch (Exception e) {&#10;            showAlert(&quot;Failed to initiate video call.&quot;);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/videoCall/AudioReceiver.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/videoCall/AudioReceiver.java" />
              <option name="originalContent" value="package com.videoCall;&#10;&#10;import javax.sound.sampled.*;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;&#10;public class AudioReceiver implements Runnable {&#10;    private final int listenPort;&#10;    private volatile boolean running = true;&#10;&#10;    public AudioReceiver(int listenPort) {&#10;        this.listenPort = listenPort;&#10;    }&#10;&#10;    public void stop() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        AudioFormat format = getAudioFormat();&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            SourceDataLine speakers = AudioSystem.getSourceDataLine(format);&#10;            speakers.open(format);&#10;            speakers.start();&#10;&#10;            byte[] buffer = new byte[512];&#10;&#10;            while (running) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;                speakers.write(packet.getData(), 0, packet.getLength());&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private AudioFormat getAudioFormat() {&#10;        return new AudioFormat(16000.0f, 16, 1, true, false);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.videoCall;&#10;&#10;import javax.sound.sampled.*;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;&#10;public class AudioReceiver extends Thread {&#10;    private final int listenPort;&#10;    private volatile boolean running = true;&#10;&#10;    public AudioReceiver(int listenPort) {&#10;        this.listenPort = listenPort;&#10;    }&#10;&#10;    public void stopThread() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        AudioFormat format = getAudioFormat();&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            SourceDataLine speakers = AudioSystem.getSourceDataLine(format);&#10;            speakers.open(format);&#10;            speakers.start();&#10;&#10;            byte[] buffer = new byte[512];&#10;&#10;            while (running) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;                speakers.write(packet.getData(), 0, packet.getLength());&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private AudioFormat getAudioFormat() {&#10;        return new AudioFormat(16000.0f, 16, 1, true, false);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/videoCall/AudioSender.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/videoCall/AudioSender.java" />
              <option name="originalContent" value="package com.videoCall;&#10;&#10;import javax.sound.sampled.*;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;public class AudioSender implements Runnable {&#10;    private final String serverIP;&#10;    private final int serverPort;&#10;    private volatile boolean running = true;&#10;&#10;    public AudioSender(String serverIP, int serverPort) {&#10;        this.serverIP = serverIP;&#10;        this.serverPort = serverPort;&#10;    }&#10;&#10;    public void stop() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        AudioFormat format = getAudioFormat();&#10;        try (DatagramSocket socket = new DatagramSocket()) {&#10;            InetAddress serverAddr = InetAddress.getByName(serverIP);&#10;            TargetDataLine microphone = AudioSystem.getTargetDataLine(format);&#10;            microphone.open(format);&#10;            microphone.start();&#10;&#10;            byte[] buffer = new byte[512];&#10;&#10;            while (running) {&#10;                int count = microphone.read(buffer, 0, buffer.length);&#10;                if (count &gt; 0) {&#10;                    DatagramPacket packet = new DatagramPacket(buffer, count, serverAddr, serverPort);&#10;                    socket.send(packet);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private AudioFormat getAudioFormat() {&#10;        return new AudioFormat(16000.0f, 16, 1, true, false);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.videoCall;&#10;&#10;import javax.sound.sampled.*;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;public class AudioSender extends Thread {&#10;    private final String serverIP;&#10;    private final int serverPort;&#10;    private volatile boolean running = true;&#10;&#10;    public AudioSender(String serverIP, int serverPort) {&#10;        this.serverIP = serverIP;&#10;        this.serverPort = serverPort;&#10;    }&#10;&#10;    public void stopThread() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        AudioFormat format = getAudioFormat();&#10;        try (DatagramSocket socket = new DatagramSocket()) {&#10;            InetAddress serverAddr = InetAddress.getByName(serverIP);&#10;            TargetDataLine microphone = AudioSystem.getTargetDataLine(format);&#10;            microphone.open(format);&#10;            microphone.start();&#10;&#10;            byte[] buffer = new byte[512];&#10;&#10;            while (running) {&#10;                int count = microphone.read(buffer, 0, buffer.length);&#10;                if (count &gt; 0) {&#10;                    DatagramPacket packet = new DatagramPacket(buffer, count, serverAddr, serverPort);&#10;                    socket.send(packet);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    private AudioFormat getAudioFormat() {&#10;        return new AudioFormat(16000.0f, 16, 1, true, false);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/videoCall/VideoReceiver.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/videoCall/VideoReceiver.java" />
              <option name="originalContent" value="package com.videoCall;&#10;&#10;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayInputStream;&#10;import java.io.ByteArrayOutputStream;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;&#10;public class VideoReceiver implements Runnable {&#10;    private final ImageView imageView;&#10;    private final int listenPort;&#10;    @FXML private ImageView video;&#10;    private volatile boolean running = true;&#10;&#10;    public VideoReceiver(ImageView imageView, int listenPort) {&#10;        this.imageView = imageView;&#10;        this.listenPort = listenPort;&#10;    }&#10;    public static Image convertBufferedImageToFxImage(BufferedImage bImage) {&#10;        if (bImage == null) {&#10;            return null;&#10;        }&#10;        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {&#10;            ImageIO.write(bImage, &quot;jpg&quot;, bos); // Write as PNG to the stream&#10;            byte[] imageBytes = bos.toByteArray();&#10;            try (ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes)) {&#10;                return new Image(bis); // Create JavaFX Image from the stream&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error converting BufferedImage to JavaFX Image: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public void stop() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            byte[] buffer = new byte[65535];&#10;            while (running) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;                ByteArrayInputStream bais = new ByteArrayInputStream(packet.getData(), 0, packet.getLength());&#10;                BufferedImage image = ImageIO.read(bais);&#10;                if (image != null) {&#10;&#10;                    // TODO show the image in the ImageView dialog&#10;                    Image fxImage= convertBufferedImageToFxImage(image);&#10;                    Platform.runLater(() -&gt; imageView.setImage(fxImage));&#10;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.videoCall;&#10;&#10;&#10;import javafx.application.Platform;&#10;import javafx.fxml.FXML;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayInputStream;&#10;import java.io.ByteArrayOutputStream;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;&#10;public class VideoReceiver extends Thread {&#10;    private final ImageView imageView;&#10;    private final int listenPort;&#10;    @FXML private ImageView video;&#10;    private volatile boolean running = true;&#10;&#10;    public VideoReceiver(ImageView imageView, int listenPort) {&#10;        this.imageView = imageView;&#10;        this.listenPort = listenPort;&#10;    }&#10;    public static Image convertBufferedImageToFxImage(BufferedImage bImage) {&#10;        if (bImage == null) {&#10;            return null;&#10;        }&#10;        try (ByteArrayOutputStream bos = new ByteArrayOutputStream()) {&#10;            ImageIO.write(bImage, &quot;jpg&quot;, bos); // Write as PNG to the stream&#10;            byte[] imageBytes = bos.toByteArray();&#10;            try (ByteArrayInputStream bis = new ByteArrayInputStream(imageBytes)) {&#10;                return new Image(bis); // Create JavaFX Image from the stream&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;Error converting BufferedImage to JavaFX Image: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return null;&#10;        }&#10;    }&#10;&#10;    public void stopThread() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            byte[] buffer = new byte[65535];&#10;            while (running) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;                ByteArrayInputStream bais = new ByteArrayInputStream(packet.getData(), 0, packet.getLength());&#10;                BufferedImage image = ImageIO.read(bais);&#10;                if (image != null) {&#10;&#10;                    // TODO show the image in the ImageView dialog&#10;                    Image fxImage= convertBufferedImageToFxImage(image);&#10;                    Platform.runLater(() -&gt; imageView.setImage(fxImage));&#10;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/com/videoCall/VideoSender.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/com/videoCall/VideoSender.java" />
              <option name="originalContent" value="package com.videoCall;&#10;&#10;import com.github.sarxos.webcam.Webcam;&#10;import javafx.application.Platform;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayOutputStream;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;import static com.videoCall.VideoReceiver.convertBufferedImageToFxImage;&#10;&#10;public class VideoSender implements Runnable {&#10;    private  String serverIP;&#10;    private  int serverPort;&#10;    private ImageView imageView;&#10;    private volatile boolean running = true;&#10;&#10;    public VideoSender(String serverIP, int serverPort) {&#10;        this.serverIP = serverIP;&#10;        this.serverPort = serverPort;&#10;    }&#10;    public VideoSender(ImageView imageView) {&#10;        this.imageView = imageView;&#10;&#10;    }&#10;&#10;    public void stop() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;//&#10;        try (DatagramSocket socket = new DatagramSocket()) {&#10;            InetAddress serverAddr = InetAddress.getByName(serverIP);&#10;            Webcam webcam = Webcam.getDefault();&#10;            webcam.setViewSize(new java.awt.Dimension(320, 240));&#10;            webcam.open();&#10;&#10;            while (running) {&#10;                BufferedImage image = webcam.getImage();&#10;//                Image fxImage= convertBufferedImageToFxImage(image);&#10;//                Platform.runLater(() -&gt; imageView.setImage(fxImage));&#10;                System.out.println(&quot;video running ..&quot;);&#10;                ByteArrayOutputStream baos = new ByteArrayOutputStream();&#10;                ImageIO.write(image, &quot;jpg&quot;, baos);&#10;                byte[] data = baos.toByteArray();&#10;&#10;//                DatagramPacket packet = new DatagramPacket(data, data.length, serverAddr, serverPort);&#10;//                socket.send(packet);&#10;&#10;                Thread.sleep(40); // ~15 FPS&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.videoCall;&#10;&#10;import com.github.sarxos.webcam.Webcam;&#10;import javafx.application.Platform;&#10;import javafx.scene.image.Image;&#10;import javafx.scene.image.ImageView;&#10;&#10;&#10;import javax.imageio.ImageIO;&#10;import java.awt.image.BufferedImage;&#10;import java.io.ByteArrayOutputStream;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;import static com.videoCall.VideoReceiver.convertBufferedImageToFxImage;&#10;&#10;public class VideoSender extends Thread {&#10;    private  String serverIP;&#10;    private  int serverPort;&#10;    private ImageView imageView;&#10;    private volatile boolean running = true;&#10;&#10;    public VideoSender(String serverIP, int serverPort) {&#10;        this.serverIP = serverIP;&#10;        this.serverPort = serverPort;&#10;    }&#10;    public VideoSender(ImageView imageView) {&#10;        this.imageView = imageView;&#10;&#10;    }&#10;&#10;    public void stopThread() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;//&#10;        try (DatagramSocket socket = new DatagramSocket()) {&#10;            InetAddress serverAddr = InetAddress.getByName(serverIP);&#10;            Webcam webcam = Webcam.getDefault();&#10;            webcam.setViewSize(new java.awt.Dimension(320, 240));&#10;            webcam.open();&#10;&#10;            while (running) {&#10;                BufferedImage image = webcam.getImage();&#10;//                Image fxImage= convertBufferedImageToFxImage(image);&#10;//                Platform.runLater(() -&gt; imageView.setImage(fxImage));&#10;                System.out.println(&quot;video running ..&quot;);&#10;                ByteArrayOutputStream baos = new ByteArrayOutputStream();&#10;                ImageIO.write(image, &quot;jpg&quot;, baos);&#10;                byte[] data = baos.toByteArray();&#10;&#10;//                DatagramPacket packet = new DatagramPacket(data, data.length, serverAddr, serverPort);&#10;//                socket.send(packet);&#10;&#10;                Thread.sleep(40); // ~15 FPS&#10;            }&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/model/Message.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/model/Message.java" />
              <option name="originalContent" value="package model;&#10;&#10;import java.io.Serializable;&#10;import java.time.LocalDateTime;&#10;&#10;public class Message implements Serializable {&#10;    private String roomId;&#10;    private String senderPhone;&#10;    private String content;&#10;    private LocalDateTime timestamp;&#10;&#10;    public Message(String roomId, String senderPhone, String content) {&#10;        this.roomId = roomId;&#10;        this.senderPhone = senderPhone;&#10;        this.content = content;&#10;        this.timestamp = LocalDateTime.now();&#10;    }&#10;&#10;    public String getRoomId() { return roomId; }&#10;    public String getSenderPhone() { return senderPhone; }&#10;    public String getContent() { return content; }&#10;    public LocalDateTime getTimestamp() { return timestamp; }&#10;}&#10;" />
              <option name="updatedContent" value="package model;&#10;&#10;import java.io.Serializable;&#10;import java.time.LocalDateTime;&#10;&#10;public class Message implements Serializable {&#10;    private String roomId;&#10;    private String senderPhone;&#10;    private String content;&#10;    private LocalDateTime timestamp;&#10;&#10;    public Message(String roomId, String senderPhone, String content) {&#10;        this.roomId = roomId;&#10;        this.senderPhone = senderPhone;&#10;        this.content = content;&#10;        this.timestamp = LocalDateTime.now();&#10;    }&#10;&#10;    // New constructor with timestamp&#10;    public Message(String roomId, String senderPhone, String content, LocalDateTime timestamp) {&#10;        this.roomId = roomId;&#10;        this.senderPhone = senderPhone;&#10;        this.content = content;&#10;        this.timestamp = timestamp;&#10;    }&#10;&#10;    public String getRoomId() { return roomId; }&#10;    public String getSenderPhone() { return senderPhone; }&#10;    public String getContent() { return content; }&#10;    public LocalDateTime getTimestamp() { return timestamp; }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/server/ChatDatabase.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/server/ChatDatabase.java" />
              <option name="originalContent" value="package server;&#10;&#10;import model.Message;&#10;&#10;import java.io.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ChatDatabase {&#10;&#10;    private String getRoomFile(String roomId) {&#10;        return &quot;room-&quot; + roomId + &quot;.dat&quot;;&#10;    }&#10;&#10;    public List&lt;Message&gt; loadRoomChat(String roomId) {&#10;        String file = getRoomFile(roomId);&#10;        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {&#10;            return (List&lt;Message&gt;) ois.readObject();&#10;        } catch (Exception e) {&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    public void saveRoomMessage(Message message) {&#10;        String file = getRoomFile(message.getRoomId());&#10;        List&lt;Message&gt; messages = loadRoomChat(message.getRoomId());&#10;        messages.add(message);&#10;&#10;        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {&#10;            oos.writeObject(messages);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;import model.Message;&#10;&#10;import java.io.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class ChatDatabase {&#10;&#10;    private String getRoomFile(String roomId) {&#10;        return &quot;room-&quot; + roomId + &quot;.dat&quot;;&#10;    }&#10;&#10;    public List&lt;Message&gt; loadRoomChat(String roomId) {&#10;        String file = getRoomFile(roomId);&#10;        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(file))) {&#10;            return (List&lt;Message&gt;) ois.readObject();&#10;        } catch (Exception e) {&#10;            return new ArrayList&lt;&gt;();&#10;        }&#10;    }&#10;&#10;    public void saveRoomMessage(Message message) {&#10;        String file = getRoomFile(message.getRoomId());&#10;        List&lt;Message&gt; messages = loadRoomChat(message.getRoomId());&#10;        messages.add(message);&#10;&#10;        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(file))) {&#10;            oos.writeObject(messages);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    // Create a new room file if it doesn't exist&#10;    public void createRoomFile(String roomId) {&#10;        String file = getRoomFile(roomId);&#10;        File f = new File(file);&#10;        if (!f.exists()) {&#10;            try {&#10;                f.createNewFile();&#10;                try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(f))) {&#10;                    oos.writeObject(new ArrayList&lt;Message&gt;());&#10;                }&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/server/ClientHandler.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/server/ClientHandler.java" />
              <option name="originalContent" value="package server;&#10;&#10;import model.Message;&#10;import model.User;&#10;&#10;import java.io.*;&#10;import java.net.Socket;&#10;import java.util.*;&#10;&#10;import static server.ServerMain.saveUsersToFile;&#10;&#10;public class ClientHandler extends Thread {&#10;    private Socket socket;&#10;    private ObjectInputStream in;&#10;    private ObjectOutputStream out;&#10;    private User currentUser;&#10;    private String currentRoom;&#10;&#10;    public ClientHandler(Socket socket) {&#10;        try {&#10;            this.socket = socket;&#10;            this.out = new ObjectOutputStream(socket.getOutputStream());&#10;            this.in = new ObjectInputStream(socket.getInputStream());&#10;            this.start();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void run() {&#10;        try {&#10;            while (true) {&#10;                Object obj = in.readObject();&#10;                if (obj instanceof String command) {&#10;                    if (command.startsWith(&quot;LOGIN:&quot;)) {&#10;                        handleLogin(command);&#10;                    } else if (command.startsWith(&quot;JOIN:&quot;)) {&#10;                        handleJoin(command);&#10;                    } else if (command.startsWith(&quot;CREATE:&quot;)) {&#10;                        handleCreateAccount(command);&#10;                    } else if (command.startsWith(&quot;CREATE_ROOM:&quot;)) {&#10;                        createRoom(command);&#10;                    }&#10;                    else if(command.startsWith(&quot;LEAVE:&quot;)) {&#10;                        leaveRoom();&#10;                    }&#10;                } else if (obj instanceof Message msg) {&#10;                    ServerMain.roomHistory.computeIfAbsent(msg.getRoomId(), k -&gt; new ArrayList&lt;&gt;()).add(msg);&#10;                    // After receiving a Message `msg` from client&#10;                    new ChatDatabase().saveRoomMessage(msg); // Add this&#10;                    broadcastToRoom(msg.getRoomId(), msg);&#10;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            if (currentRoom != null) {&#10;                ServerMain.roomClients.get(currentRoom).remove(out);&#10;            }&#10;            System.out.println(&quot;Client disconnected&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleLogin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 3);&#10;        String phone = parts[1];&#10;        String pass = parts[2];&#10;&#10;        User user = ServerMain.users.get(phone);&#10;        if (user != null &amp;&amp; user.getPassword().equals(pass)) {&#10;            currentUser = user;&#10;            out.writeObject(&quot;SUCCESS&quot;);&#10;            out.writeObject(user);&#10;        } else {&#10;            out.writeObject(&quot;FAIL&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleCreateAccount(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 5);&#10;        String phone = parts[1];&#10;        String name = parts[2];&#10;        String pass = parts[3];&#10;        String base64 = parts[4];&#10;&#10;        if (ServerMain.users.containsKey(phone)) {&#10;            out.writeObject(&quot;EXISTS&quot;);&#10;        } else {&#10;            User u = new User(phone, name, pass, base64);&#10;            ServerMain.users.put(phone, u);&#10;            saveUsersToFile(); // ✅ Save all users&#10;            out.writeObject(&quot;CREATED&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleJoin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        currentRoom = parts[1];&#10;        ServerMain.roomClients.computeIfAbsent(currentRoom, k -&gt; new ArrayList&lt;&gt;()).add(out);&#10;&#10;        // Send chat history&#10;        List&lt;Message&gt; history = new ChatDatabase().loadRoomChat(currentRoom);&#10;        out.writeObject(history);&#10;&#10;    }&#10;&#10;    private void broadcastToRoom(String roomId, Message msg) {&#10;        List&lt;ObjectOutputStream&gt; clients = ServerMain.roomClients.getOrDefault(roomId, new ArrayList&lt;&gt;());&#10;        for (ObjectOutputStream o : clients) {&#10;            try {&#10;                o.writeObject(msg);&#10;                o.flush();&#10;            } catch (IOException ignored) {}&#10;        }&#10;    }&#10;&#10;    private void createRoom(String command) {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        String roomId = parts[1];&#10;        try {&#10;            // Initialize room history if not exists&#10;            if (!ServerMain.roomHistory.containsKey(roomId)) {&#10;                File file = new File(&quot;room-&quot; + roomId + &quot;.dat&quot;);&#10;                if (file.exists()) {&#10;                    try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {&#10;                        List&lt;Message&gt; messages = (List&lt;Message&gt;) in.readObject();&#10;                        ServerMain.roomHistory.put(roomId, messages);&#10;                    } catch (Exception e) {&#10;                        ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                    }&#10;                } else {&#10;                    ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                }&#10;            }&#10;&#10;            // Initialize room clients list if not exists&#10;            ServerMain.roomClients.putIfAbsent(roomId, new ArrayList&lt;&gt;());&#10;&#10;            // Add this client’s output stream to the room&#10;            ServerMain.roomClients.get(roomId).add(out);&#10;&#10;            // Send the full history to the new client&#10;            out.writeObject(ServerMain.roomHistory.get(roomId));&#10;            out.flush();&#10;&#10;            System.out.println(&quot;Client joined room: &quot; + roomId);&#10;&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Failed to create or join room: &quot; + roomId);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    &#10;    public void leaveRoom() {&#10;        if (currentRoom != null &amp;&amp; ServerMain.roomClients.containsKey(currentRoom)) {&#10;            ServerMain.roomClients.get(currentRoom).remove(out);&#10;            currentRoom = null;&#10;            try {&#10;                out.writeObject(&quot;LEFT&quot;);&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                &#10;            }&#10;        }&#10;        try {&#10;            out.writeObject(&quot;ERROR&quot;);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server;&#10;&#10;import model.Message;&#10;import model.User;&#10;&#10;import java.io.*;&#10;import java.net.Socket;&#10;import java.util.*;&#10;&#10;import static server.ServerMain.saveUsersToFile;&#10;&#10;public class ClientHandler extends Thread {&#10;    private Socket socket;&#10;    private ObjectInputStream in;&#10;    private ObjectOutputStream out;&#10;    private User currentUser;&#10;    private String currentRoom;&#10;&#10;    public ClientHandler(Socket socket) {&#10;        try {&#10;            this.socket = socket;&#10;            this.out = new ObjectOutputStream(socket.getOutputStream());&#10;            this.in = new ObjectInputStream(socket.getInputStream());&#10;            this.start();&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;&#10;    public void run() {&#10;        try {&#10;            while (true) {&#10;                Object obj = in.readObject();&#10;                if (obj instanceof String command) {&#10;                    if (command.startsWith(&quot;LOGIN:&quot;)) {&#10;                        handleLogin(command);&#10;                    } else if (command.startsWith(&quot;JOIN:&quot;)) {&#10;                        handleJoin(command);&#10;                    } else if (command.startsWith(&quot;CREATE:&quot;)) {&#10;                        handleCreateAccount(command);&#10;                    } else if (command.startsWith(&quot;CREATE_ROOM:&quot;)) {&#10;                        createRoom(command);&#10;                    }&#10;                    else if(command.startsWith(&quot;LEAVE:&quot;)) {&#10;                        leaveRoom();&#10;                    }&#10;                } else if (obj instanceof Message msg) {&#10;                    ServerMain.roomHistory.computeIfAbsent(msg.getRoomId(), k -&gt; new ArrayList&lt;&gt;()).add(msg);&#10;                    // After receiving a Message `msg` from client&#10;                    new ChatDatabase().saveRoomMessage(msg); // Add this&#10;                    broadcastToRoom(msg.getRoomId(), msg);&#10;&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            if (currentRoom != null) {&#10;                ServerMain.roomClients.get(currentRoom).remove(out);&#10;            }&#10;            System.out.println(&quot;Client disconnected&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleLogin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 3);&#10;        String phone = parts[1];&#10;        String pass = parts[2];&#10;&#10;        User user = ServerMain.users.get(phone);&#10;        if (user != null &amp;&amp; user.getPassword().equals(pass)) {&#10;            currentUser = user;&#10;            out.writeObject(&quot;SUCCESS&quot;);&#10;            out.writeObject(user);&#10;        } else {&#10;            out.writeObject(&quot;FAIL&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleCreateAccount(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 5);&#10;        String phone = parts[1];&#10;        String name = parts[2];&#10;        String pass = parts[3];&#10;        String base64 = parts[4];&#10;&#10;        if (ServerMain.users.containsKey(phone)) {&#10;            out.writeObject(&quot;EXISTS&quot;);&#10;        } else {&#10;            User u = new User(phone, name, pass, base64);&#10;            ServerMain.users.put(phone, u);&#10;            saveUsersToFile(); // ✅ Save all users&#10;            out.writeObject(&quot;CREATED&quot;);&#10;        }&#10;    }&#10;&#10;    private void handleJoin(String command) throws IOException {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        currentRoom = parts[1];&#10;        ServerMain.roomClients.computeIfAbsent(currentRoom, k -&gt; new ArrayList&lt;&gt;()).add(out);&#10;&#10;        // Send chat history&#10;        List&lt;Message&gt; history = new ChatDatabase().loadRoomChat(currentRoom);&#10;        out.writeObject(history);&#10;&#10;    }&#10;&#10;    private void broadcastToRoom(String roomId, Message msg) {&#10;        List&lt;ObjectOutputStream&gt; clients = ServerMain.roomClients.getOrDefault(roomId, new ArrayList&lt;&gt;());&#10;        for (ObjectOutputStream o : clients) {&#10;            try {&#10;                o.writeObject(msg);&#10;                o.flush();&#10;            } catch (IOException ignored) {}&#10;        }&#10;    }&#10;&#10;    private void createRoom(String command) {&#10;        String[] parts = command.split(&quot;:&quot;, 2);&#10;        String roomId = parts[1];&#10;        try {&#10;            // Initialize room history if not exists&#10;            if (!ServerMain.roomHistory.containsKey(roomId)) {&#10;                File file = new File(&quot;room-&quot; + roomId + &quot;.dat&quot;);&#10;                if (file.exists()) {&#10;                    try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(file))) {&#10;                        List&lt;Message&gt; messages = (List&lt;Message&gt;) in.readObject();&#10;                        ServerMain.roomHistory.put(roomId, messages);&#10;                    } catch (Exception e) {&#10;                        ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                    }&#10;                } else {&#10;                    ServerMain.roomHistory.put(roomId, new ArrayList&lt;&gt;());&#10;                }&#10;            }&#10;&#10;            // Initialize room clients list if not exists&#10;            ServerMain.roomClients.putIfAbsent(roomId, new ArrayList&lt;&gt;());&#10;&#10;            // Add this client’s output stream to the room&#10;            ServerMain.roomClients.get(roomId).add(out);&#10;&#10;            // Send the full history to the new client&#10;            out.writeObject(ServerMain.roomHistory.get(roomId));&#10;            out.flush();&#10;&#10;            System.out.println(&quot;Client joined room: &quot; + roomId);&#10;&#10;        } catch (IOException e) {&#10;            System.err.println(&quot;Failed to create or join room: &quot; + roomId);&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;    &#10;    public void leaveRoom() {&#10;        if (currentRoom != null &amp;&amp; ServerMain.roomClients.containsKey(currentRoom)) {&#10;            ServerMain.roomClients.get(currentRoom).remove(out);&#10;            currentRoom = null;&#10;            try {&#10;                out.writeObject(&quot;LEFT&quot;);&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;                &#10;            }&#10;        }&#10;        try {&#10;            out.writeObject(&quot;ERROR&quot;);&#10;        } catch (IOException e) {&#10;            e.printStackTrace();&#10;        }&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/server/videoCallRelay/AudioRelayServer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/server/videoCallRelay/AudioRelayServer.java" />
              <option name="originalContent" value="package server.videoCallRelay;&#10;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;public class AudioRelayServer implements Runnable {&#10;&#10;    private  int listenPort;&#10;    private  InetAddress client1Addr;&#10;    private  int client1Port=5558;&#10;    private  InetAddress client2Addr;&#10;    private  int client2Port=5558;&#10;&#10;    public AudioRelayServer(int listenPort, InetAddress client1Addr, int client1Port,&#10;                      InetAddress client2Addr, int client2Port) {&#10;        this.listenPort = listenPort;&#10;        this.client1Addr = client1Addr;&#10;        this.client1Port = client1Port;&#10;        this.client2Addr = client2Addr;&#10;        this.client2Port = client2Port;&#10;    }&#10;&#10;    public AudioRelayServer(int listenPort, InetAddress client1Addr, InetAddress client2Addr) {&#10;        this.listenPort = listenPort;&#10;        this.client1Addr = client1Addr;&#10;        this.client2Addr = client2Addr;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            byte[] buffer = new byte[512];&#10;&#10;            while (true) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;&#10;                InetAddress senderAddr = packet.getAddress();&#10;                int senderPort = packet.getPort();&#10;&#10;                DatagramPacket forwardPacket;&#10;                if (senderAddr.equals(client1Addr) &amp;&amp; senderPort == client1Port) {&#10;                    forwardPacket = new DatagramPacket(packet.getData(), packet.getLength(), client2Addr, client2Port);&#10;                } else if (senderAddr.equals(client2Addr) &amp;&amp; senderPort == client2Port) {&#10;                    forwardPacket = new DatagramPacket(packet.getData(), packet.getLength(), client1Addr, client1Port);&#10;                } else {&#10;                    continue; // ignore unknown source&#10;                }&#10;&#10;                socket.send(forwardPacket);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server.videoCallRelay;&#10;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;public class AudioRelayServer extends Thread {&#10;&#10;    private  int listenPort;&#10;    private  InetAddress client1Addr;&#10;    private  int client1Port=5558;&#10;    private  InetAddress client2Addr;&#10;    private  int client2Port=5558;&#10;    private volatile boolean running = true;&#10;&#10;    public AudioRelayServer(int listenPort, InetAddress client1Addr, int client1Port,&#10;                      InetAddress client2Addr, int client2Port) {&#10;        this.listenPort = listenPort;&#10;        this.client1Addr = client1Addr;&#10;        this.client1Port = client1Port;&#10;        this.client2Addr = client2Addr;&#10;        this.client2Port = client2Port;&#10;    }&#10;&#10;    public AudioRelayServer(int listenPort, InetAddress client1Addr, InetAddress client2Addr) {&#10;        this.listenPort = listenPort;&#10;        this.client1Addr = client1Addr;&#10;        this.client2Addr = client2Addr;&#10;    }&#10;&#10;    public void stopThread() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            byte[] buffer = new byte[512];&#10;&#10;            while (running) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;&#10;                InetAddress senderAddr = packet.getAddress();&#10;                int senderPort = packet.getPort();&#10;&#10;                DatagramPacket forwardPacket;&#10;                if (senderAddr.equals(client1Addr) &amp;&amp; senderPort == client1Port) {&#10;                    forwardPacket = new DatagramPacket(packet.getData(), packet.getLength(), client2Addr, client2Port);&#10;                } else if (senderAddr.equals(client2Addr) &amp;&amp; senderPort == client2Port) {&#10;                    forwardPacket = new DatagramPacket(packet.getData(), packet.getLength(), client1Addr, client1Port);&#10;                } else {&#10;                    continue; // ignore unknown source&#10;                }&#10;&#10;                socket.send(forwardPacket);&#10;            }&#10;&#10;        } catch (Exception e) {&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/java/server/videoCallRelay/VideoRelayServer.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/java/server/videoCallRelay/VideoRelayServer.java" />
              <option name="originalContent" value="package server.videoCallRelay;&#10;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;public class VideoRelayServer implements Runnable {&#10;    private  int listenPort;&#10;    private  InetAddress client1Address;&#10;    private  int client1Port=5556;&#10;    private  InetAddress client2Address;&#10;    private  int client2Port=5556;&#10;&#10;    public VideoRelayServer(int listenPort, InetAddress client1Address, int client1Port,&#10;                      InetAddress client2Address, int client2Port) {&#10;        this.listenPort = listenPort;&#10;        this.client1Address = client1Address;&#10;        this.client1Port = client1Port;&#10;        this.client2Address = client2Address;&#10;        this.client2Port = client2Port;&#10;    }&#10;&#10;    public VideoRelayServer(int listenPort, InetAddress client1Address, InetAddress client2Address) {&#10;        this.listenPort = listenPort;&#10;        this.client1Address = client1Address;&#10;        this.client2Address = client2Address;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            System.out.println(&quot; VideoRelay started on port &quot; + listenPort);&#10;&#10;            byte[] buffer = new byte[65535];&#10;&#10;            while (true) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;&#10;                InetAddress senderAddr = packet.getAddress();&#10;                int senderPort = packet.getPort();&#10;&#10;                InetAddress targetAddr = null;&#10;                int targetPort = -1;&#10;&#10;                if (senderAddr.equals(client1Address) &amp;&amp; senderPort == client1Port) {&#10;                    targetAddr = client2Address;&#10;                    targetPort = client2Port;&#10;                } else if (senderAddr.equals(client2Address) &amp;&amp; senderPort == client2Port) {&#10;                    targetAddr = client1Address;&#10;                    targetPort = client1Port;&#10;                }&#10;&#10;                if (targetAddr != null) {&#10;                    DatagramPacket forward = new DatagramPacket(&#10;                            packet.getData(), packet.getLength(), targetAddr, targetPort&#10;                    );&#10;                    socket.send(forward);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ VideoRelay error: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package server.videoCallRelay;&#10;&#10;import java.net.DatagramPacket;&#10;import java.net.DatagramSocket;&#10;import java.net.InetAddress;&#10;&#10;public class VideoRelayServer extends Thread {&#10;    private  int listenPort;&#10;    private  InetAddress client1Address;&#10;    private  int client1Port=5556;&#10;    private  InetAddress client2Address;&#10;    private  int client2Port=5556;&#10;    private volatile boolean running = true;&#10;&#10;    public VideoRelayServer(int listenPort, InetAddress client1Address, int client1Port,&#10;                      InetAddress client2Address, int client2Port) {&#10;        this.listenPort = listenPort;&#10;        this.client1Address = client1Address;&#10;        this.client1Port = client1Port;&#10;        this.client2Address = client2Address;&#10;        this.client2Port = client2Port;&#10;    }&#10;&#10;    public VideoRelayServer(int listenPort, InetAddress client1Address, InetAddress client2Address) {&#10;        this.listenPort = listenPort;&#10;        this.client1Address = client1Address;&#10;        this.client2Address = client2Address;&#10;    }&#10;&#10;    public void stopThread() {&#10;        running = false;&#10;    }&#10;&#10;    @Override&#10;    public void run() {&#10;        try (DatagramSocket socket = new DatagramSocket(listenPort)) {&#10;            System.out.println(&quot; VideoRelay started on port &quot; + listenPort);&#10;&#10;            byte[] buffer = new byte[65535];&#10;&#10;            while (running) {&#10;                DatagramPacket packet = new DatagramPacket(buffer, buffer.length);&#10;                socket.receive(packet);&#10;&#10;                InetAddress senderAddr = packet.getAddress();&#10;                int senderPort = packet.getPort();&#10;&#10;                InetAddress targetAddr = null;&#10;                int targetPort = -1;&#10;&#10;                if (senderAddr.equals(client1Address) &amp;&amp; senderPort == client1Port) {&#10;                    targetAddr = client2Address;&#10;                    targetPort = client2Port;&#10;                } else if (senderAddr.equals(client2Address) &amp;&amp; senderPort == client2Port) {&#10;                    targetAddr = client1Address;&#10;                    targetPort = client1Port;&#10;                }&#10;&#10;                if (targetAddr != null) {&#10;                    DatagramPacket forward = new DatagramPacket(&#10;                            packet.getData(), packet.getLength(), targetAddr, targetPort&#10;                    );&#10;                    socket.send(forward);&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;❌ VideoRelay error: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/main/resources/chat.fxml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/main/resources/chat.fxml" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.Cursor?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.image.Image?&gt;&#10;&lt;?import javafx.scene.image.ImageView?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.Font?&gt;&#10;&#10;&lt;AnchorPane xmlns=&quot;http://javafx.com/javafx/23.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot;&#10;            fx:controller=&quot;com.client.chat.ChatController&quot;&#10;            prefHeight=&quot;600.0&quot; prefWidth=&quot;1000.0&quot; stylesheets=&quot;@styles/style.css&quot;&gt;&#10;&#10;   &lt;children&gt;&#10;&#10;      &lt;!-- Left contacts/search section --&gt;&#10;      &lt;VBox fx:id=&quot;contactsBox&quot; layoutX=&quot;-4.0&quot; layoutY=&quot;-2.0&quot; prefHeight=&quot;610.0&quot; prefWidth=&quot;347.0&quot; styleClass=&quot;contact-list&quot;&gt;&#10;         &lt;children&gt;&#10;&#10;            &lt;!-- Search Bar --&gt;&#10;            &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;57.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 5;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;searchIcon&quot; fitHeight=&quot;27.0&quot; fitWidth=&quot;27.0&quot;  style=&quot;-fx-opacity: 0.5;&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-search-40.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;&#10;                  &lt;TextField fx:id=&quot;searchField&quot; promptText=&quot;Search by name/phone&quot; prefHeight=&quot;46.0&quot; prefWidth=&quot;250.0&quot; style=&quot;-fx-text-fill: black;&quot; /&gt;&#10;&#10;                  &lt;ImageView fx:id=&quot;clearSearch&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; pickOnBounds=&quot;true&quot; style=&quot;-fx-translate-x: -40px;&quot;&gt;&#10;                     &lt;cursor&gt;&#10;                        &lt;Cursor fx:constant=&quot;HAND&quot; /&gt;&#10;                     &lt;/cursor&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-cancel-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;&#10;            &lt;!-- Chat list (room members or found users) --&gt;&#10;            &lt;ScrollPane fitToWidth=&quot;true&quot; prefHeight=&quot;487.0&quot; prefWidth=&quot;342.0&quot;&gt;&#10;               &lt;content&gt;&#10;                  &lt;VBox fx:id=&quot;chatList&quot; prefHeight=&quot;482.0&quot; prefWidth=&quot;338.0&quot;/&gt;&#10;               &lt;/content&gt;&#10;            &lt;/ScrollPane&gt;&#10;&#10;            &lt;!-- User info and settings --&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;62.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 40;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;userImage&quot; fitHeight=&quot;50.0&quot; fitWidth=&quot;50.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot; styleClass=&quot;user-img&quot;&gt;&#10;                     &lt;HBox.margin&gt;&#10;                        &lt;Insets left=&quot;20.0&quot;/&gt;&#10;                     &lt;/HBox.margin&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;userName&quot; styleClass=&quot;name-text&quot; text=&quot;Your Name&quot; textFill=&quot;WHITE&quot;/&gt;&#10;                  &lt;Button fx:id=&quot;settingsButton&quot; styleClass=&quot;settings-icon-btn&quot;&gt;&#10;                     &lt;graphic&gt;&#10;                        &lt;ImageView fitHeight=&quot;42.0&quot; fitWidth=&quot;44.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot;&gt;&#10;                           &lt;image&gt;&#10;                              &lt;Image url=&quot;@icons/gear_8.png&quot;/&gt;&#10;                           &lt;/image&gt;&#10;                        &lt;/ImageView&gt;&#10;                     &lt;/graphic&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- Room Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; layoutX=&quot;343.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;10.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;262.0&quot; padding=&quot;10&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fitHeight=&quot;34.0&quot; fitWidth=&quot;34.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/messenger_logo.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;roomLabel&quot; text=&quot;Room #&quot; style=&quot;-fx-text-fill: white; -fx-font-size: 16px;&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;            &lt;TextField fx:id=&quot;roomField&quot; promptText=&quot;Enter Room ID&quot; prefWidth=&quot;150.0&quot; /&gt;&#10;            &lt;Button fx:id=&quot;joinRoomButton&quot; text=&quot;Join&quot; styleClass=&quot;join-room-btn&quot;/&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Messages area --&gt;&#10;      &lt;ScrollPane fx:id=&quot;messageScrollPane&quot; layoutX=&quot;344.0&quot; layoutY=&quot;59.0&quot; prefHeight=&quot;486.0&quot; prefWidth=&quot;656.0&quot;&gt;&#10;         &lt;content&gt;&#10;            &lt;VBox fx:id=&quot;messageContainer&quot; alignment=&quot;BOTTOM_RIGHT&quot; prefHeight=&quot;483.0&quot; prefWidth=&quot;646.0&quot; spacing=&quot;10.0&quot; padding=&quot;10.0&quot;/&gt;&#10;         &lt;/content&gt;&#10;      &lt;/ScrollPane&gt;&#10;&#10;      &lt;!-- Message input --&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; layoutX=&quot;341.0&quot; layoutY=&quot;545.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7; -fx-spacing: 30;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;ImageView fx:id=&quot;sendIcon&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;image&gt;&#10;                  &lt;Image url=&quot;@icons/icons8-photo-30.png&quot;/&gt;&#10;               &lt;/image&gt;&#10;            &lt;/ImageView&gt;&#10;            &lt;TextField fx:id=&quot;messageField&quot; promptText=&quot;Write a message...&quot; prefHeight=&quot;37.0&quot; prefWidth=&quot;457.0&quot; styleClass=&quot;search-input&quot;/&gt;&#10;            &lt;Button fx:id=&quot;sendButton&quot;  prefHeight=&quot;35.0&quot; prefWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;graphic&gt;&#10;                  &lt;ImageView fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-telegram-app-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/graphic&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;   &lt;/children&gt;&#10;&lt;/AnchorPane&gt;&#10;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;?import javafx.geometry.Insets?&gt;&#10;&lt;?import javafx.scene.Cursor?&gt;&#10;&lt;?import javafx.scene.control.*?&gt;&#10;&lt;?import javafx.scene.image.Image?&gt;&#10;&lt;?import javafx.scene.image.ImageView?&gt;&#10;&lt;?import javafx.scene.layout.*?&gt;&#10;&lt;?import javafx.scene.text.Font?&gt;&#10;&#10;&lt;AnchorPane xmlns=&quot;http://javafx.com/javafx/23.0.1&quot; xmlns:fx=&quot;http://javafx.com/fxml/1&quot;&#10;            fx:controller=&quot;com.client.chat.ChatController&quot;&#10;            prefHeight=&quot;600.0&quot; prefWidth=&quot;1000.0&quot; stylesheets=&quot;@styles/style.css&quot;&gt;&#10;&#10;   &lt;children&gt;&#10;&#10;      &lt;!-- Left contacts/search section --&gt;&#10;      &lt;VBox fx:id=&quot;contactsBox&quot; layoutX=&quot;-4.0&quot; layoutY=&quot;-2.0&quot; prefHeight=&quot;610.0&quot; prefWidth=&quot;347.0&quot; styleClass=&quot;contact-list&quot;&gt;&#10;         &lt;children&gt;&#10;&#10;            &lt;!-- Search Bar --&gt;&#10;            &lt;HBox alignment=&quot;CENTER&quot; prefHeight=&quot;57.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 5;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;searchIcon&quot; fitHeight=&quot;27.0&quot; fitWidth=&quot;27.0&quot;  style=&quot;-fx-opacity: 0.5;&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-search-40.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;&#10;                  &lt;TextField fx:id=&quot;searchField&quot; promptText=&quot;Search by name/phone&quot; prefHeight=&quot;46.0&quot; prefWidth=&quot;250.0&quot; style=&quot;-fx-text-fill: black;&quot; /&gt;&#10;&#10;                  &lt;ImageView fx:id=&quot;clearSearch&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; pickOnBounds=&quot;true&quot; style=&quot;-fx-translate-x: -40px;&quot;&gt;&#10;                     &lt;cursor&gt;&#10;                        &lt;Cursor fx:constant=&quot;HAND&quot; /&gt;&#10;                     &lt;/cursor&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-cancel-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;&#10;            &lt;!-- Chat list (room members or found users) --&gt;&#10;            &lt;ScrollPane fitToWidth=&quot;true&quot; prefHeight=&quot;487.0&quot; prefWidth=&quot;342.0&quot;&gt;&#10;               &lt;content&gt;&#10;                  &lt;VBox fx:id=&quot;chatList&quot; prefHeight=&quot;482.0&quot; prefWidth=&quot;338.0&quot;/&gt;&#10;               &lt;/content&gt;&#10;            &lt;/ScrollPane&gt;&#10;&#10;            &lt;!-- User info and settings --&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; prefHeight=&quot;62.0&quot; prefWidth=&quot;342.0&quot; style=&quot;-fx-spacing: 40;&quot; styleClass=&quot;accent-color&quot;&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fx:id=&quot;userImage&quot; fitHeight=&quot;50.0&quot; fitWidth=&quot;50.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot; styleClass=&quot;user-img&quot;&gt;&#10;                     &lt;HBox.margin&gt;&#10;                        &lt;Insets left=&quot;20.0&quot;/&gt;&#10;                     &lt;/HBox.margin&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;userName&quot; styleClass=&quot;name-text&quot; text=&quot;Your Name&quot; textFill=&quot;WHITE&quot;/&gt;&#10;                  &lt;Button fx:id=&quot;settingsButton&quot; styleClass=&quot;settings-icon-btn&quot;&gt;&#10;                     &lt;graphic&gt;&#10;                        &lt;ImageView fitHeight=&quot;42.0&quot; fitWidth=&quot;44.0&quot; pickOnBounds=&quot;true&quot; preserveRatio=&quot;true&quot;&gt;&#10;                           &lt;image&gt;&#10;                              &lt;Image url=&quot;@icons/gear_8.png&quot;/&gt;&#10;                           &lt;/image&gt;&#10;                        &lt;/ImageView&gt;&#10;                     &lt;/graphic&gt;&#10;                  &lt;/Button&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;         &lt;/children&gt;&#10;      &lt;/VBox&gt;&#10;&#10;      &lt;!-- Room Header --&gt;&#10;      &lt;HBox alignment=&quot;CENTER_LEFT&quot; layoutX=&quot;343.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;HBox alignment=&quot;CENTER_LEFT&quot; spacing=&quot;10.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;262.0&quot;&gt;&#10;               &lt;padding&gt;&#10;                  &lt;Insets top=&quot;10.0&quot; right=&quot;10.0&quot; bottom=&quot;10.0&quot; left=&quot;10.0&quot;/&gt;&#10;               &lt;/padding&gt;&#10;               &lt;children&gt;&#10;                  &lt;ImageView fitHeight=&quot;34.0&quot; fitWidth=&quot;34.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/messenger_logo.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;                  &lt;Label fx:id=&quot;roomLabel&quot; text=&quot;Room #&quot; style=&quot;-fx-text-fill: white; -fx-font-size: 16px;&quot; /&gt;&#10;               &lt;/children&gt;&#10;            &lt;/HBox&gt;&#10;            &lt;TextField fx:id=&quot;roomField&quot; promptText=&quot;Enter Room ID&quot; prefWidth=&quot;150.0&quot; /&gt;&#10;            &lt;Button fx:id=&quot;joinRoomButton&quot; text=&quot;Join&quot; styleClass=&quot;join-room-btn&quot;/&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;      &lt;!-- Messages area --&gt;&#10;      &lt;ScrollPane fx:id=&quot;messageScrollPane&quot; layoutX=&quot;344.0&quot; layoutY=&quot;59.0&quot; prefHeight=&quot;486.0&quot; prefWidth=&quot;656.0&quot;&gt;&#10;         &lt;content&gt;&#10;            &lt;VBox fx:id=&quot;messageContainer&quot; alignment=&quot;BOTTOM_RIGHT&quot; prefHeight=&quot;483.0&quot; prefWidth=&quot;646.0&quot; spacing=&quot;10.0&quot;&gt;&#10;               &lt;padding&gt;&#10;                  &lt;Insets top=&quot;10.0&quot; right=&quot;10.0&quot; bottom=&quot;10.0&quot; left=&quot;10.0&quot;/&gt;&#10;               &lt;/padding&gt;&#10;            &lt;/VBox&gt;&#10;         &lt;/content&gt;&#10;      &lt;/ScrollPane&gt;&#10;&#10;      &lt;!-- Message input --&gt;&#10;      &lt;HBox alignment=&quot;CENTER&quot; layoutX=&quot;341.0&quot; layoutY=&quot;545.0&quot; prefHeight=&quot;58.0&quot; prefWidth=&quot;662.0&quot; style=&quot;-fx-background-color: #3b4ef7; -fx-spacing: 30;&quot;&gt;&#10;         &lt;children&gt;&#10;            &lt;ImageView fx:id=&quot;sendIcon&quot; fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;image&gt;&#10;                  &lt;Image url=&quot;@icons/icons8-photo-30.png&quot;/&gt;&#10;               &lt;/image&gt;&#10;            &lt;/ImageView&gt;&#10;            &lt;TextField fx:id=&quot;messageField&quot; promptText=&quot;Write a message...&quot; prefHeight=&quot;37.0&quot; prefWidth=&quot;457.0&quot; styleClass=&quot;search-input&quot;/&gt;&#10;            &lt;Button fx:id=&quot;sendButton&quot;  prefHeight=&quot;35.0&quot; prefWidth=&quot;35.0&quot; styleClass=&quot;send-btn&quot;&gt;&#10;               &lt;graphic&gt;&#10;                  &lt;ImageView fitHeight=&quot;35.0&quot; fitWidth=&quot;35.0&quot;&gt;&#10;                     &lt;image&gt;&#10;                        &lt;Image url=&quot;@icons/icons8-telegram-app-50.png&quot;/&gt;&#10;                     &lt;/image&gt;&#10;                  &lt;/ImageView&gt;&#10;               &lt;/graphic&gt;&#10;            &lt;/Button&gt;&#10;         &lt;/children&gt;&#10;      &lt;/HBox&gt;&#10;&#10;   &lt;/children&gt;&#10;&lt;/AnchorPane&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>